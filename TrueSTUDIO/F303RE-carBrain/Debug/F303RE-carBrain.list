
F303RE-carBrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002040  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002260  08002260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002264  08002264  00012264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000de4  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000df4  20000df4  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_line   00005740  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001363e  00000000  00000000  00025780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002b1c  00000000  00000000  00038dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000920  00000000  00000000  0003b8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c58  00000000  00000000  0003c200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000057b0  00000000  00000000  0003ce58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003f8d  00000000  00000000  00042608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00046595  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001844  00000000  00000000  00046614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080021c8 	.word	0x080021c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080021c8 	.word	0x080021c8

080001e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000218 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001e6:	e003      	b.n	80001f0 <LoopCopyDataInit>

080001e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001ee:	3104      	adds	r1, #4

080001f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001f0:	480b      	ldr	r0, [pc, #44]	; (8000220 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <LoopForever+0xe>)
	adds	r2, r0, r1
 80001f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001f8:	d3f6      	bcc.n	80001e8 <CopyDataInit>
	ldr	r2, =_sbss
 80001fa:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001fc:	e002      	b.n	8000204 <LoopFillZerobss>

080001fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000200:	f842 3b04 	str.w	r3, [r2], #4

08000204 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000204:	4b09      	ldr	r3, [pc, #36]	; (800022c <LoopForever+0x16>)
	cmp	r2, r3
 8000206:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000208:	d3f9      	bcc.n	80001fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800020a:	f000 f959 	bl	80004c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800020e:	f001 ffb7 	bl	8002180 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000212:	f000 f85d 	bl	80002d0 <main>

08000216 <LoopForever>:

LoopForever:
    b LoopForever
 8000216:	e7fe      	b.n	8000216 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000218:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800021c:	08002268 	.word	0x08002268
	ldr	r0, =_sdata
 8000220:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000224:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000228:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800022c:	20000df4 	.word	0x20000df4

08000230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000230:	e7fe      	b.n	8000230 <ADC1_2_IRQHandler>

08000232 <StartCarTask>:

}

/* USER CODE BEGIN 4 */
void StartCarTask(void const * argument)
{
 8000232:	b508      	push	{r3, lr}
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000234:	2120      	movs	r1, #32
 8000236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023a:	f000 fafa 	bl	8000832 <HAL_GPIO_TogglePin>
	  osDelay(100);
 800023e:	2064      	movs	r0, #100	; 0x64
 8000240:	f001 f9dc 	bl	80015fc <osDelay>
 8000244:	e7f6      	b.n	8000234 <StartCarTask+0x2>

08000246 <StartDefaultTask>:
}
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8000246:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000248:	2001      	movs	r0, #1
 800024a:	f001 f9d7 	bl	80015fc <osDelay>
 800024e:	e7fb      	b.n	8000248 <StartDefaultTask+0x2>

08000250 <SystemClock_Config>:
{
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000258:	2310      	movs	r3, #16
 800025a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800025c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000260:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000262:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000268:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800026c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000270:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000272:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f000 fae2 	bl	800083c <HAL_RCC_OscConfig>
 8000278:	b100      	cbz	r0, 800027c <SystemClock_Config+0x2c>
 800027a:	e7fe      	b.n	800027a <SystemClock_Config+0x2a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	250f      	movs	r5, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000280:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000284:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000286:	4621      	mov	r1, r4
 8000288:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000290:	f000 fd82 	bl	8000d98 <HAL_RCC_ClockConfig>
 8000294:	b100      	cbz	r0, 8000298 <SystemClock_Config+0x48>
 8000296:	e7fe      	b.n	8000296 <SystemClock_Config+0x46>
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000298:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029a:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800029c:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029e:	f000 fe5b 	bl	8000f58 <HAL_RCCEx_PeriphCLKConfig>
 80002a2:	4604      	mov	r4, r0
 80002a4:	b100      	cbz	r0, 80002a8 <SystemClock_Config+0x58>
 80002a6:	e7fe      	b.n	80002a6 <SystemClock_Config+0x56>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002a8:	f000 fe20 	bl	8000eec <HAL_RCC_GetHCLKFreq>
 80002ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80002b4:	f000 f9c6 	bl	8000644 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80002b8:	2004      	movs	r0, #4
 80002ba:	f000 f9d9 	bl	8000670 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80002be:	4622      	mov	r2, r4
 80002c0:	4629      	mov	r1, r5
 80002c2:	f04f 30ff 	mov.w	r0, #4294967295
 80002c6:	f000 f989 	bl	80005dc <HAL_NVIC_SetPriority>
}
 80002ca:	b027      	add	sp, #156	; 0x9c
 80002cc:	bd30      	pop	{r4, r5, pc}
	...

080002d0 <main>:
{
 80002d0:	b500      	push	{lr}
 80002d2:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80002d4:	f000 f94c 	bl	8000570 <HAL_Init>
  SystemClock_Config();
 80002d8:	f7ff ffba 	bl	8000250 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002dc:	4b37      	ldr	r3, [pc, #220]	; (80003bc <main+0xec>)
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80002e4:	615a      	str	r2, [r3, #20]
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80002ec:	9200      	str	r2, [sp, #0]
 80002ee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002f0:	695a      	ldr	r2, [r3, #20]
 80002f2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80002f6:	615a      	str	r2, [r3, #20]
 80002f8:	695a      	ldr	r2, [r3, #20]
 80002fa:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80002fe:	9201      	str	r2, [sp, #4]
 8000300:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	695a      	ldr	r2, [r3, #20]
 8000304:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000308:	615a      	str	r2, [r3, #20]
 800030a:	695a      	ldr	r2, [r3, #20]
 800030c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000310:	9202      	str	r2, [sp, #8]
 8000312:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000314:	695a      	ldr	r2, [r3, #20]
 8000316:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800031a:	615a      	str	r2, [r3, #20]
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000324:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000326:	2120      	movs	r1, #32
 8000328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800032e:	f000 fa7b 	bl	8000828 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8000338:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800033a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800033c:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <main+0xf0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800033e:	4821      	ldr	r0, [pc, #132]	; (80003c4 <main+0xf4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000340:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000344:	f000 f9a0 	bl	8000688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000348:	2320      	movs	r3, #32
 800034a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800034c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000358:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800035a:	f000 f995 	bl	8000688 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800035e:	481a      	ldr	r0, [pc, #104]	; (80003c8 <main+0xf8>)
  huart2.Init.BaudRate = 38400;
 8000360:	4a1a      	ldr	r2, [pc, #104]	; (80003cc <main+0xfc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8000364:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000368:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800036c:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800036e:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000370:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000372:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000374:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000376:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000378:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800037a:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800037c:	f001 f8ef 	bl	800155e <HAL_UART_Init>
 8000380:	4606      	mov	r6, r0
 8000382:	b100      	cbz	r0, 8000386 <main+0xb6>
 8000384:	e7fe      	b.n	8000384 <main+0xb4>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000386:	4c12      	ldr	r4, [pc, #72]	; (80003d0 <main+0x100>)
 8000388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800038a:	ad04      	add	r5, sp, #16
 800038c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800038e:	f854 3b04 	ldr.w	r3, [r4], #4
 8000392:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000394:	4631      	mov	r1, r6
 8000396:	a804      	add	r0, sp, #16
 8000398:	f001 f918 	bl	80015cc <osThreadCreate>
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <main+0x104>)
 800039e:	6018      	str	r0, [r3, #0]
  osThreadDef(carTask, StartCarTask, osPriorityNormal, 0, 128);
 80003a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003a2:	ad09      	add	r5, sp, #36	; 0x24
 80003a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003a6:	6823      	ldr	r3, [r4, #0]
 80003a8:	602b      	str	r3, [r5, #0]
  carTaskHandle = osThreadCreate(osThread(carTask), NULL);
 80003aa:	4631      	mov	r1, r6
 80003ac:	a809      	add	r0, sp, #36	; 0x24
 80003ae:	f001 f90d 	bl	80015cc <osThreadCreate>
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <main+0x108>)
 80003b4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80003b6:	f001 f904 	bl	80015c2 <osKernelStart>
 80003ba:	e7fe      	b.n	80003ba <main+0xea>
 80003bc:	40021000 	.word	0x40021000
 80003c0:	10210000 	.word	0x10210000
 80003c4:	48000800 	.word	0x48000800
 80003c8:	20000d80 	.word	0x20000d80
 80003cc:	40004400 	.word	0x40004400
 80003d0:	080021e0 	.word	0x080021e0
 80003d4:	20000d7c 	.word	0x20000d7c
 80003d8:	20000d78 	.word	0x20000d78

080003dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003dc:	4b21      	ldr	r3, [pc, #132]	; (8000464 <HAL_MspInit+0x88>)
{
 80003de:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e0:	699a      	ldr	r2, [r3, #24]
 80003e2:	f042 0201 	orr.w	r2, r2, #1
 80003e6:	619a      	str	r2, [r3, #24]
 80003e8:	699a      	ldr	r2, [r3, #24]
 80003ea:	f002 0201 	and.w	r2, r2, #1
 80003ee:	9200      	str	r2, [sp, #0]
 80003f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	69da      	ldr	r2, [r3, #28]
 80003f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003f8:	61da      	str	r2, [r3, #28]
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000400:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000402:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000404:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000406:	f000 f8d7 	bl	80005b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	4611      	mov	r1, r2
 800040e:	f06f 000b 	mvn.w	r0, #11
 8000412:	f000 f8e3 	bl	80005dc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	4611      	mov	r1, r2
 800041a:	f06f 000a 	mvn.w	r0, #10
 800041e:	f000 f8dd 	bl	80005dc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	4611      	mov	r1, r2
 8000426:	f06f 0009 	mvn.w	r0, #9
 800042a:	f000 f8d7 	bl	80005dc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	4611      	mov	r1, r2
 8000432:	f06f 0004 	mvn.w	r0, #4
 8000436:	f000 f8d1 	bl	80005dc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	4611      	mov	r1, r2
 800043e:	f06f 0003 	mvn.w	r0, #3
 8000442:	f000 f8cb 	bl	80005dc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	210f      	movs	r1, #15
 800044a:	f06f 0001 	mvn.w	r0, #1
 800044e:	f000 f8c5 	bl	80005dc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	210f      	movs	r1, #15
 8000456:	f04f 30ff 	mov.w	r0, #4294967295
 800045a:	f000 f8bf 	bl	80005dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	b003      	add	sp, #12
 8000460:	f85d fb04 	ldr.w	pc, [sp], #4
 8000464:	40021000 	.word	0x40021000

08000468 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000468:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800046a:	6802      	ldr	r2, [r0, #0]
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_UART_MspInit+0x44>)
 800046e:	429a      	cmp	r2, r3
 8000470:	d118      	bne.n	80004a4 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000472:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8000478:	69da      	ldr	r2, [r3, #28]
 800047a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800047e:	61da      	str	r2, [r3, #28]
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800048a:	230c      	movs	r3, #12
 800048c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048e:	2302      	movs	r3, #2
 8000490:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800049c:	2307      	movs	r3, #7
 800049e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	f000 f8f2 	bl	8000688 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004a4:	b007      	add	sp, #28
 80004a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80004aa:	bf00      	nop
 80004ac:	40004400 	.word	0x40004400

080004b0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80004b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b2:	f000 f86f 	bl	8000594 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 80004ba:	f001 b8a7 	b.w	800160c <osSystickHandler>
	...

080004c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c0:	4915      	ldr	r1, [pc, #84]	; (8000518 <SystemInit+0x58>)
 80004c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80004c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004ce:	4b13      	ldr	r3, [pc, #76]	; (800051c <SystemInit+0x5c>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	f042 0201 	orr.w	r2, r2, #1
 80004d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80004d8:	6858      	ldr	r0, [r3, #4]
 80004da:	4a11      	ldr	r2, [pc, #68]	; (8000520 <SystemInit+0x60>)
 80004dc:	4002      	ands	r2, r0
 80004de:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80004e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80004ea:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80004f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004f4:	685a      	ldr	r2, [r3, #4]
 80004f6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80004fa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80004fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004fe:	f022 020f 	bic.w	r2, r2, #15
 8000502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000504:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000506:	4a07      	ldr	r2, [pc, #28]	; (8000524 <SystemInit+0x64>)
 8000508:	4002      	ands	r2, r0
 800050a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000510:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000514:	608b      	str	r3, [r1, #8]
 8000516:	4770      	bx	lr
 8000518:	e000ed00 	.word	0xe000ed00
 800051c:	40021000 	.word	0x40021000
 8000520:	f87fc00c 	.word	0xf87fc00c
 8000524:	ff00fccc 	.word	0xff00fccc

08000528 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_InitTick+0x3c>)
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_InitTick+0x40>)
{
 800052e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	7818      	ldrb	r0, [r3, #0]
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	fbb3 f3f0 	udiv	r3, r3, r0
 800053a:	6810      	ldr	r0, [r2, #0]
 800053c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000540:	f000 f880 	bl	8000644 <HAL_SYSTICK_Config>
 8000544:	4604      	mov	r4, r0
 8000546:	b958      	cbnz	r0, 8000560 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000548:	2d0f      	cmp	r5, #15
 800054a:	d809      	bhi.n	8000560 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054c:	4602      	mov	r2, r0
 800054e:	4629      	mov	r1, r5
 8000550:	f04f 30ff 	mov.w	r0, #4294967295
 8000554:	f000 f842 	bl	80005dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <HAL_InitTick+0x44>)
 800055a:	4620      	mov	r0, r4
 800055c:	601d      	str	r5, [r3, #0]
 800055e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000560:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000562:	bd38      	pop	{r3, r4, r5, pc}
 8000564:	20000000 	.word	0x20000000
 8000568:	20000004 	.word	0x20000004
 800056c:	20000008 	.word	0x20000008

08000570 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_Init+0x20>)
{
 8000572:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000574:	6813      	ldr	r3, [r2, #0]
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f81b 	bl	80005b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	200f      	movs	r0, #15
 8000584:	f7ff ffd0 	bl	8000528 <HAL_InitTick>
  HAL_MspInit();
 8000588:	f7ff ff28 	bl	80003dc <HAL_MspInit>
}
 800058c:	2000      	movs	r0, #0
 800058e:	bd08      	pop	{r3, pc}
 8000590:	40022000 	.word	0x40022000

08000594 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <HAL_IncTick+0x10>)
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <HAL_IncTick+0x14>)
 8000598:	6811      	ldr	r1, [r2, #0]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	440b      	add	r3, r1
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000df0 	.word	0x20000df0
 80005a8:	20000004 	.word	0x20000004

080005ac <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <HAL_GetTick+0x8>)
 80005ae:	6818      	ldr	r0, [r3, #0]
}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000df0 	.word	0x20000df0

080005b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005c0:	041b      	lsls	r3, r3, #16
 80005c2:	0c1b      	lsrs	r3, r3, #16
 80005c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005c8:	0200      	lsls	r0, r0, #8
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005d4:	60d3      	str	r3, [r2, #12]
 80005d6:	4770      	bx	lr
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	68dc      	ldr	r4, [r3, #12]
 80005e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	bf28      	it	cs
 80005f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	f04f 0501 	mov.w	r5, #1
 80005f8:	fa05 f303 	lsl.w	r3, r5, r3
 80005fc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000600:	bf8c      	ite	hi
 8000602:	3c03      	subhi	r4, #3
 8000604:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000606:	4019      	ands	r1, r3
 8000608:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800060a:	fa05 f404 	lsl.w	r4, r5, r4
 800060e:	3c01      	subs	r4, #1
 8000610:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000612:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	ea42 0201 	orr.w	r2, r2, r1
 8000618:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	bfaf      	iteee	ge
 800061e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	f000 000f 	andlt.w	r0, r0, #15
 8000626:	4b06      	ldrlt	r3, [pc, #24]	; (8000640 <HAL_NVIC_SetPriority+0x64>)
 8000628:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	bfa5      	ittet	ge
 800062c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000630:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00
 8000640:	e000ed14 	.word	0xe000ed14

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	3801      	subs	r0, #1
 8000646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064a:	d20a      	bcs.n	8000662 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	21f0      	movs	r1, #240	; 0xf0
 8000654:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000672:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000674:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000676:	bf0c      	ite	eq
 8000678:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800067c:	f022 0204 	bicne.w	r2, r2, #4
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	e000e010 	.word	0xe000e010

08000688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800068c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000690:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000824 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000694:	4a61      	ldr	r2, [pc, #388]	; (800081c <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000696:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000698:	fa38 f403 	lsrs.w	r4, r8, r3
 800069c:	d102      	bne.n	80006a4 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800069e:	b003      	add	sp, #12
 80006a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006a4:	f04f 0e01 	mov.w	lr, #1
 80006a8:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80006ac:	ea18 060e 	ands.w	r6, r8, lr
 80006b0:	f000 80a6 	beq.w	8000800 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006b4:	684c      	ldr	r4, [r1, #4]
 80006b6:	f024 0710 	bic.w	r7, r4, #16
 80006ba:	2f02      	cmp	r7, #2
 80006bc:	d116      	bne.n	80006ec <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80006be:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006c2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006c6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80006ca:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006d2:	f04f 0c0f 	mov.w	ip, #15
 80006d6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006da:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006de:	690d      	ldr	r5, [r1, #16]
 80006e0:	fa05 f50b 	lsl.w	r5, r5, fp
 80006e4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80006e8:	f8ca 5020 	str.w	r5, [sl, #32]
 80006ec:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006f0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006f2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006f6:	fa05 f50a 	lsl.w	r5, r5, sl
 80006fa:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006fc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000700:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000704:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000708:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800070a:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800070e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000710:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000714:	d811      	bhi.n	800073a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000716:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000718:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800071c:	68cf      	ldr	r7, [r1, #12]
 800071e:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000722:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000726:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000728:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800072a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800072e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000732:	409f      	lsls	r7, r3
 8000734:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000738:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800073a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800073c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800073e:	688f      	ldr	r7, [r1, #8]
 8000740:	fa07 f70a 	lsl.w	r7, r7, sl
 8000744:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000746:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000748:	00e5      	lsls	r5, r4, #3
 800074a:	d559      	bpl.n	8000800 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000750:	f045 0501 	orr.w	r5, r5, #1
 8000754:	f8c9 5018 	str.w	r5, [r9, #24]
 8000758:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800075c:	f023 0703 	bic.w	r7, r3, #3
 8000760:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000764:	f005 0501 	and.w	r5, r5, #1
 8000768:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800076c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800076e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000774:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000776:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800077a:	f04f 0e0f 	mov.w	lr, #15
 800077e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000782:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000786:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800078a:	d03b      	beq.n	8000804 <HAL_GPIO_Init+0x17c>
 800078c:	4d24      	ldr	r5, [pc, #144]	; (8000820 <HAL_GPIO_Init+0x198>)
 800078e:	42a8      	cmp	r0, r5
 8000790:	d03a      	beq.n	8000808 <HAL_GPIO_Init+0x180>
 8000792:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000796:	42a8      	cmp	r0, r5
 8000798:	d038      	beq.n	800080c <HAL_GPIO_Init+0x184>
 800079a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079e:	42a8      	cmp	r0, r5
 80007a0:	d036      	beq.n	8000810 <HAL_GPIO_Init+0x188>
 80007a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a6:	42a8      	cmp	r0, r5
 80007a8:	d034      	beq.n	8000814 <HAL_GPIO_Init+0x18c>
 80007aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ae:	42a8      	cmp	r0, r5
 80007b0:	d032      	beq.n	8000818 <HAL_GPIO_Init+0x190>
 80007b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b6:	42a8      	cmp	r0, r5
 80007b8:	bf14      	ite	ne
 80007ba:	2507      	movne	r5, #7
 80007bc:	2506      	moveq	r5, #6
 80007be:	fa05 f50c 	lsl.w	r5, r5, ip
 80007c2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80007c6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007c8:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007ca:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007d0:	bf0c      	ite	eq
 80007d2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80007d4:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80007d6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80007d8:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007da:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007de:	bf0c      	ite	eq
 80007e0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80007e2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80007e4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80007e6:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007e8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007ec:	bf0c      	ite	eq
 80007ee:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80007f0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80007f2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80007f4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007f6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007f8:	bf54      	ite	pl
 80007fa:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80007fc:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80007fe:	60d5      	str	r5, [r2, #12]
    position++;
 8000800:	3301      	adds	r3, #1
 8000802:	e749      	b.n	8000698 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000804:	2500      	movs	r5, #0
 8000806:	e7da      	b.n	80007be <HAL_GPIO_Init+0x136>
 8000808:	2501      	movs	r5, #1
 800080a:	e7d8      	b.n	80007be <HAL_GPIO_Init+0x136>
 800080c:	2502      	movs	r5, #2
 800080e:	e7d6      	b.n	80007be <HAL_GPIO_Init+0x136>
 8000810:	2503      	movs	r5, #3
 8000812:	e7d4      	b.n	80007be <HAL_GPIO_Init+0x136>
 8000814:	2504      	movs	r5, #4
 8000816:	e7d2      	b.n	80007be <HAL_GPIO_Init+0x136>
 8000818:	2505      	movs	r5, #5
 800081a:	e7d0      	b.n	80007be <HAL_GPIO_Init+0x136>
 800081c:	40010400 	.word	0x40010400
 8000820:	48000400 	.word	0x48000400
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000828:	b10a      	cbz	r2, 800082e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800082a:	6181      	str	r1, [r0, #24]
 800082c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800082e:	6281      	str	r1, [r0, #40]	; 0x28
 8000830:	4770      	bx	lr

08000832 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000832:	6943      	ldr	r3, [r0, #20]
 8000834:	4059      	eors	r1, r3
 8000836:	6141      	str	r1, [r0, #20]
 8000838:	4770      	bx	lr
	...

0800083c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800083c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000840:	4605      	mov	r5, r0
 8000842:	b918      	cbnz	r0, 800084c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000844:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000846:	b002      	add	sp, #8
 8000848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800084c:	6803      	ldr	r3, [r0, #0]
 800084e:	07df      	lsls	r7, r3, #31
 8000850:	d411      	bmi.n	8000876 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000852:	682b      	ldr	r3, [r5, #0]
 8000854:	079e      	lsls	r6, r3, #30
 8000856:	f100 8088 	bmi.w	800096a <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800085a:	682b      	ldr	r3, [r5, #0]
 800085c:	071c      	lsls	r4, r3, #28
 800085e:	f100 80fc 	bmi.w	8000a5a <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000862:	682b      	ldr	r3, [r5, #0]
 8000864:	0758      	lsls	r0, r3, #29
 8000866:	f100 8145 	bmi.w	8000af4 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800086a:	69aa      	ldr	r2, [r5, #24]
 800086c:	2a00      	cmp	r2, #0
 800086e:	f040 81dc 	bne.w	8000c2a <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000872:	2000      	movs	r0, #0
 8000874:	e7e7      	b.n	8000846 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000876:	4cbd      	ldr	r4, [pc, #756]	; (8000b6c <HAL_RCC_OscConfig+0x330>)
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	f003 030c 	and.w	r3, r3, #12
 800087e:	2b04      	cmp	r3, #4
 8000880:	d00a      	beq.n	8000898 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000882:	6863      	ldr	r3, [r4, #4]
 8000884:	f003 030c 	and.w	r3, r3, #12
 8000888:	2b08      	cmp	r3, #8
 800088a:	d119      	bne.n	80008c0 <HAL_RCC_OscConfig+0x84>
 800088c:	6863      	ldr	r3, [r4, #4]
 800088e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000896:	d113      	bne.n	80008c0 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800089c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a0:	6821      	ldr	r1, [r4, #0]
 80008a2:	fa93 f3a3 	rbit	r3, r3
 80008a6:	fab3 f383 	clz	r3, r3
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	2201      	movs	r2, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	420b      	tst	r3, r1
 80008b6:	d0cc      	beq.n	8000852 <HAL_RCC_OscConfig+0x16>
 80008b8:	686b      	ldr	r3, [r5, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1c9      	bne.n	8000852 <HAL_RCC_OscConfig+0x16>
 80008be:	e7c1      	b.n	8000844 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c0:	686b      	ldr	r3, [r5, #4]
 80008c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c6:	d11e      	bne.n	8000906 <HAL_RCC_OscConfig+0xca>
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008d0:	f7ff fe6c 	bl	80005ac <HAL_GetTick>
 80008d4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80008d8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008da:	2701      	movs	r7, #1
 80008dc:	fa96 f3a6 	rbit	r3, r6
 80008e0:	6822      	ldr	r2, [r4, #0]
 80008e2:	fa96 f3a6 	rbit	r3, r6
 80008e6:	fab3 f383 	clz	r3, r3
 80008ea:	f003 031f 	and.w	r3, r3, #31
 80008ee:	fa07 f303 	lsl.w	r3, r7, r3
 80008f2:	4213      	tst	r3, r2
 80008f4:	d1ad      	bne.n	8000852 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008f6:	f7ff fe59 	bl	80005ac <HAL_GetTick>
 80008fa:	eba0 0008 	sub.w	r0, r0, r8
 80008fe:	2864      	cmp	r0, #100	; 0x64
 8000900:	d9ec      	bls.n	80008dc <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000902:	2003      	movs	r0, #3
 8000904:	e79f      	b.n	8000846 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000906:	bb0b      	cbnz	r3, 800094c <HAL_RCC_OscConfig+0x110>
 8000908:	6823      	ldr	r3, [r4, #0]
 800090a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800090e:	6023      	str	r3, [r4, #0]
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000916:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000918:	f7ff fe48 	bl	80005ac <HAL_GetTick>
 800091c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000920:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000922:	2701      	movs	r7, #1
 8000924:	fa96 f3a6 	rbit	r3, r6
 8000928:	6822      	ldr	r2, [r4, #0]
 800092a:	fa96 f3a6 	rbit	r3, r6
 800092e:	fab3 f383 	clz	r3, r3
 8000932:	f003 031f 	and.w	r3, r3, #31
 8000936:	fa07 f303 	lsl.w	r3, r7, r3
 800093a:	4213      	tst	r3, r2
 800093c:	d089      	beq.n	8000852 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800093e:	f7ff fe35 	bl	80005ac <HAL_GetTick>
 8000942:	eba0 0008 	sub.w	r0, r0, r8
 8000946:	2864      	cmp	r0, #100	; 0x64
 8000948:	d9ec      	bls.n	8000924 <HAL_RCC_OscConfig+0xe8>
 800094a:	e7da      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800094c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000950:	6823      	ldr	r3, [r4, #0]
 8000952:	d103      	bne.n	800095c <HAL_RCC_OscConfig+0x120>
 8000954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000958:	6023      	str	r3, [r4, #0]
 800095a:	e7b5      	b.n	80008c8 <HAL_RCC_OscConfig+0x8c>
 800095c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000960:	6023      	str	r3, [r4, #0]
 8000962:	6823      	ldr	r3, [r4, #0]
 8000964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000968:	e7b1      	b.n	80008ce <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800096a:	4c80      	ldr	r4, [pc, #512]	; (8000b6c <HAL_RCC_OscConfig+0x330>)
 800096c:	6863      	ldr	r3, [r4, #4]
 800096e:	f013 0f0c 	tst.w	r3, #12
 8000972:	d00a      	beq.n	800098a <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000974:	6863      	ldr	r3, [r4, #4]
 8000976:	f003 030c 	and.w	r3, r3, #12
 800097a:	2b08      	cmp	r3, #8
 800097c:	d125      	bne.n	80009ca <HAL_RCC_OscConfig+0x18e>
 800097e:	6863      	ldr	r3, [r4, #4]
 8000980:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000988:	d11f      	bne.n	80009ca <HAL_RCC_OscConfig+0x18e>
 800098a:	2302      	movs	r3, #2
 800098c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000990:	6821      	ldr	r1, [r4, #0]
 8000992:	fa93 f3a3 	rbit	r3, r3
 8000996:	fab3 f383 	clz	r3, r3
 800099a:	f003 031f 	and.w	r3, r3, #31
 800099e:	2201      	movs	r2, #1
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	420b      	tst	r3, r1
 80009a6:	d003      	beq.n	80009b0 <HAL_RCC_OscConfig+0x174>
 80009a8:	68eb      	ldr	r3, [r5, #12]
 80009aa:	4293      	cmp	r3, r2
 80009ac:	f47f af4a 	bne.w	8000844 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b0:	6821      	ldr	r1, [r4, #0]
 80009b2:	23f8      	movs	r3, #248	; 0xf8
 80009b4:	fa93 f3a3 	rbit	r3, r3
 80009b8:	fab3 f283 	clz	r2, r3
 80009bc:	692b      	ldr	r3, [r5, #16]
 80009be:	4093      	lsls	r3, r2
 80009c0:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80009c4:	4313      	orrs	r3, r2
 80009c6:	6023      	str	r3, [r4, #0]
 80009c8:	e747      	b.n	800085a <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009ca:	68ea      	ldr	r2, [r5, #12]
 80009cc:	2601      	movs	r6, #1
 80009ce:	b30a      	cbz	r2, 8000a14 <HAL_RCC_OscConfig+0x1d8>
 80009d0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80009d4:	fab3 f383 	clz	r3, r3
 80009d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	2702      	movs	r7, #2
 80009e4:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80009e6:	f7ff fde1 	bl	80005ac <HAL_GetTick>
 80009ea:	4680      	mov	r8, r0
 80009ec:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f0:	6822      	ldr	r2, [r4, #0]
 80009f2:	fa97 f3a7 	rbit	r3, r7
 80009f6:	fab3 f383 	clz	r3, r3
 80009fa:	f003 031f 	and.w	r3, r3, #31
 80009fe:	fa06 f303 	lsl.w	r3, r6, r3
 8000a02:	4213      	tst	r3, r2
 8000a04:	d1d4      	bne.n	80009b0 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a06:	f7ff fdd1 	bl	80005ac <HAL_GetTick>
 8000a0a:	eba0 0008 	sub.w	r0, r0, r8
 8000a0e:	2802      	cmp	r0, #2
 8000a10:	d9ec      	bls.n	80009ec <HAL_RCC_OscConfig+0x1b0>
 8000a12:	e776      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
 8000a14:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000a18:	fab3 f383 	clz	r3, r3
 8000a1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	2702      	movs	r7, #2
 8000a28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a2a:	f7ff fdbf 	bl	80005ac <HAL_GetTick>
 8000a2e:	4680      	mov	r8, r0
 8000a30:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a34:	6822      	ldr	r2, [r4, #0]
 8000a36:	fa97 f3a7 	rbit	r3, r7
 8000a3a:	fab3 f383 	clz	r3, r3
 8000a3e:	f003 031f 	and.w	r3, r3, #31
 8000a42:	fa06 f303 	lsl.w	r3, r6, r3
 8000a46:	4213      	tst	r3, r2
 8000a48:	f43f af07 	beq.w	800085a <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a4c:	f7ff fdae 	bl	80005ac <HAL_GetTick>
 8000a50:	eba0 0008 	sub.w	r0, r0, r8
 8000a54:	2802      	cmp	r0, #2
 8000a56:	d9eb      	bls.n	8000a30 <HAL_RCC_OscConfig+0x1f4>
 8000a58:	e753      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a5a:	696a      	ldr	r2, [r5, #20]
 8000a5c:	4e43      	ldr	r6, [pc, #268]	; (8000b6c <HAL_RCC_OscConfig+0x330>)
 8000a5e:	4944      	ldr	r1, [pc, #272]	; (8000b70 <HAL_RCC_OscConfig+0x334>)
 8000a60:	2401      	movs	r4, #1
 8000a62:	b31a      	cbz	r2, 8000aac <HAL_RCC_OscConfig+0x270>
 8000a64:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000a68:	fab3 f383 	clz	r3, r3
 8000a6c:	440b      	add	r3, r1
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	2702      	movs	r7, #2
 8000a72:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000a74:	f7ff fd9a 	bl	80005ac <HAL_GetTick>
 8000a78:	4680      	mov	r8, r0
 8000a7a:	fa97 f3a7 	rbit	r3, r7
 8000a7e:	fa97 f3a7 	rbit	r3, r7
 8000a82:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a86:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000a88:	fa97 f3a7 	rbit	r3, r7
 8000a8c:	fab3 f383 	clz	r3, r3
 8000a90:	f003 031f 	and.w	r3, r3, #31
 8000a94:	fa04 f303 	lsl.w	r3, r4, r3
 8000a98:	4213      	tst	r3, r2
 8000a9a:	f47f aee2 	bne.w	8000862 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a9e:	f7ff fd85 	bl	80005ac <HAL_GetTick>
 8000aa2:	eba0 0008 	sub.w	r0, r0, r8
 8000aa6:	2802      	cmp	r0, #2
 8000aa8:	d9e7      	bls.n	8000a7a <HAL_RCC_OscConfig+0x23e>
 8000aaa:	e72a      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
 8000aac:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000ab0:	fab3 f383 	clz	r3, r3
 8000ab4:	440b      	add	r3, r1
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	2702      	movs	r7, #2
 8000aba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000abc:	f7ff fd76 	bl	80005ac <HAL_GetTick>
 8000ac0:	4680      	mov	r8, r0
 8000ac2:	fa97 f3a7 	rbit	r3, r7
 8000ac6:	fa97 f3a7 	rbit	r3, r7
 8000aca:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ace:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000ad0:	fa97 f3a7 	rbit	r3, r7
 8000ad4:	fab3 f383 	clz	r3, r3
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	fa04 f303 	lsl.w	r3, r4, r3
 8000ae0:	4213      	tst	r3, r2
 8000ae2:	f43f aebe 	beq.w	8000862 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ae6:	f7ff fd61 	bl	80005ac <HAL_GetTick>
 8000aea:	eba0 0008 	sub.w	r0, r0, r8
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d9e7      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x286>
 8000af2:	e706      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000af4:	4c1d      	ldr	r4, [pc, #116]	; (8000b6c <HAL_RCC_OscConfig+0x330>)
 8000af6:	69e3      	ldr	r3, [r4, #28]
 8000af8:	00d9      	lsls	r1, r3, #3
 8000afa:	d434      	bmi.n	8000b66 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000afc:	69e3      	ldr	r3, [r4, #28]
 8000afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b02:	61e3      	str	r3, [r4, #28]
 8000b04:	69e3      	ldr	r3, [r4, #28]
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b0e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b10:	4f18      	ldr	r7, [pc, #96]	; (8000b74 <HAL_RCC_OscConfig+0x338>)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	05da      	lsls	r2, r3, #23
 8000b16:	d52f      	bpl.n	8000b78 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b18:	68ab      	ldr	r3, [r5, #8]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d13d      	bne.n	8000b9a <HAL_RCC_OscConfig+0x35e>
 8000b1e:	6a23      	ldr	r3, [r4, #32]
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b26:	f7ff fd41 	bl	80005ac <HAL_GetTick>
 8000b2a:	2702      	movs	r7, #2
 8000b2c:	4682      	mov	sl, r0
 8000b2e:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b30:	f04f 0801 	mov.w	r8, #1
 8000b34:	fa97 f3a7 	rbit	r3, r7
 8000b38:	fa97 f3a7 	rbit	r3, r7
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d06c      	beq.n	8000c1a <HAL_RCC_OscConfig+0x3de>
 8000b40:	6a22      	ldr	r2, [r4, #32]
 8000b42:	fa99 f3a9 	rbit	r3, r9
 8000b46:	fab3 f383 	clz	r3, r3
 8000b4a:	f003 031f 	and.w	r3, r3, #31
 8000b4e:	fa08 f303 	lsl.w	r3, r8, r3
 8000b52:	4213      	tst	r3, r2
 8000b54:	d058      	beq.n	8000c08 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f43f ae87 	beq.w	800086a <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b5c:	69e3      	ldr	r3, [r4, #28]
 8000b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b62:	61e3      	str	r3, [r4, #28]
 8000b64:	e681      	b.n	800086a <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000b66:	2600      	movs	r6, #0
 8000b68:	e7d2      	b.n	8000b10 <HAL_RCC_OscConfig+0x2d4>
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	10908120 	.word	0x10908120
 8000b74:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000b80:	f7ff fd14 	bl	80005ac <HAL_GetTick>
 8000b84:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	d4c5      	bmi.n	8000b18 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b8c:	f7ff fd0e 	bl	80005ac <HAL_GetTick>
 8000b90:	eba0 0008 	sub.w	r0, r0, r8
 8000b94:	2864      	cmp	r0, #100	; 0x64
 8000b96:	d9f6      	bls.n	8000b86 <HAL_RCC_OscConfig+0x34a>
 8000b98:	e6b3      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b9a:	bb3b      	cbnz	r3, 8000bec <HAL_RCC_OscConfig+0x3b0>
 8000b9c:	6a23      	ldr	r3, [r4, #32]
 8000b9e:	f023 0301 	bic.w	r3, r3, #1
 8000ba2:	6223      	str	r3, [r4, #32]
 8000ba4:	6a23      	ldr	r3, [r4, #32]
 8000ba6:	f023 0304 	bic.w	r3, r3, #4
 8000baa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000bac:	f7ff fcfe 	bl	80005ac <HAL_GetTick>
 8000bb0:	2702      	movs	r7, #2
 8000bb2:	4682      	mov	sl, r0
 8000bb4:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bb6:	f04f 0801 	mov.w	r8, #1
 8000bba:	fa97 f3a7 	rbit	r3, r7
 8000bbe:	fa97 f3a7 	rbit	r3, r7
 8000bc2:	b373      	cbz	r3, 8000c22 <HAL_RCC_OscConfig+0x3e6>
 8000bc4:	6a22      	ldr	r2, [r4, #32]
 8000bc6:	fa99 f3a9 	rbit	r3, r9
 8000bca:	fab3 f383 	clz	r3, r3
 8000bce:	f003 031f 	and.w	r3, r3, #31
 8000bd2:	fa08 f303 	lsl.w	r3, r8, r3
 8000bd6:	4213      	tst	r3, r2
 8000bd8:	d0bd      	beq.n	8000b56 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bda:	f7ff fce7 	bl	80005ac <HAL_GetTick>
 8000bde:	f241 3388 	movw	r3, #5000	; 0x1388
 8000be2:	eba0 000a 	sub.w	r0, r0, sl
 8000be6:	4298      	cmp	r0, r3
 8000be8:	d9e7      	bls.n	8000bba <HAL_RCC_OscConfig+0x37e>
 8000bea:	e68a      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	6a23      	ldr	r3, [r4, #32]
 8000bf0:	d103      	bne.n	8000bfa <HAL_RCC_OscConfig+0x3be>
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6223      	str	r3, [r4, #32]
 8000bf8:	e791      	b.n	8000b1e <HAL_RCC_OscConfig+0x2e2>
 8000bfa:	f023 0301 	bic.w	r3, r3, #1
 8000bfe:	6223      	str	r3, [r4, #32]
 8000c00:	6a23      	ldr	r3, [r4, #32]
 8000c02:	f023 0304 	bic.w	r3, r3, #4
 8000c06:	e78d      	b.n	8000b24 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c08:	f7ff fcd0 	bl	80005ac <HAL_GetTick>
 8000c0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c10:	eba0 000a 	sub.w	r0, r0, sl
 8000c14:	4298      	cmp	r0, r3
 8000c16:	d98d      	bls.n	8000b34 <HAL_RCC_OscConfig+0x2f8>
 8000c18:	e673      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
 8000c1a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c20:	e78f      	b.n	8000b42 <HAL_RCC_OscConfig+0x306>
 8000c22:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c28:	e7cd      	b.n	8000bc6 <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c2a:	4c44      	ldr	r4, [pc, #272]	; (8000d3c <HAL_RCC_OscConfig+0x500>)
 8000c2c:	6863      	ldr	r3, [r4, #4]
 8000c2e:	f003 030c 	and.w	r3, r3, #12
 8000c32:	2b08      	cmp	r3, #8
 8000c34:	f43f ae06 	beq.w	8000844 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c38:	2a02      	cmp	r2, #2
 8000c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c3e:	d158      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x4b6>
 8000c40:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000c44:	fab3 f383 	clz	r3, r3
 8000c48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c56:	f7ff fca9 	bl	80005ac <HAL_GetTick>
 8000c5a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000c5e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c60:	2601      	movs	r6, #1
 8000c62:	fa97 f3a7 	rbit	r3, r7
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	fa97 f3a7 	rbit	r3, r7
 8000c6c:	fab3 f383 	clz	r3, r3
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	fa06 f303 	lsl.w	r3, r6, r3
 8000c78:	4213      	tst	r3, r2
 8000c7a:	d133      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000c80:	f023 030f 	bic.w	r3, r3, #15
 8000c84:	4313      	orrs	r3, r2
 8000c86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c88:	6862      	ldr	r2, [r4, #4]
 8000c8a:	6a2b      	ldr	r3, [r5, #32]
 8000c8c:	69e9      	ldr	r1, [r5, #28]
 8000c8e:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000c92:	430b      	orrs	r3, r1
 8000c94:	4313      	orrs	r3, r2
 8000c96:	6063      	str	r3, [r4, #4]
 8000c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c9c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000ca0:	fab3 f383 	clz	r3, r3
 8000ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000cb2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fc7a 	bl	80005ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cb8:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000cba:	4607      	mov	r7, r0
 8000cbc:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cc0:	6822      	ldr	r2, [r4, #0]
 8000cc2:	fa95 f3a5 	rbit	r3, r5
 8000cc6:	fab3 f383 	clz	r3, r3
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	fa06 f303 	lsl.w	r3, r6, r3
 8000cd2:	4213      	tst	r3, r2
 8000cd4:	f47f adcd 	bne.w	8000872 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd8:	f7ff fc68 	bl	80005ac <HAL_GetTick>
 8000cdc:	1bc0      	subs	r0, r0, r7
 8000cde:	2802      	cmp	r0, #2
 8000ce0:	d9ec      	bls.n	8000cbc <HAL_RCC_OscConfig+0x480>
 8000ce2:	e60e      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ce4:	f7ff fc62 	bl	80005ac <HAL_GetTick>
 8000ce8:	eba0 0008 	sub.w	r0, r0, r8
 8000cec:	2802      	cmp	r0, #2
 8000cee:	d9b8      	bls.n	8000c62 <HAL_RCC_OscConfig+0x426>
 8000cf0:	e607      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
 8000cf2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000cf6:	fab3 f383 	clz	r3, r3
 8000cfa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cfe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc50 	bl	80005ac <HAL_GetTick>
 8000d0c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000d10:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d12:	2601      	movs	r6, #1
 8000d14:	fa95 f3a5 	rbit	r3, r5
 8000d18:	6822      	ldr	r2, [r4, #0]
 8000d1a:	fa95 f3a5 	rbit	r3, r5
 8000d1e:	fab3 f383 	clz	r3, r3
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	fa06 f303 	lsl.w	r3, r6, r3
 8000d2a:	4213      	tst	r3, r2
 8000d2c:	f43f ada1 	beq.w	8000872 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d30:	f7ff fc3c 	bl	80005ac <HAL_GetTick>
 8000d34:	1bc0      	subs	r0, r0, r7
 8000d36:	2802      	cmp	r0, #2
 8000d38:	d9ec      	bls.n	8000d14 <HAL_RCC_OscConfig+0x4d8>
 8000d3a:	e5e2      	b.n	8000902 <HAL_RCC_OscConfig+0xc6>
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000d40:	4911      	ldr	r1, [pc, #68]	; (8000d88 <HAL_RCC_GetSysClockFreq+0x48>)
 8000d42:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d44:	f003 020c 	and.w	r2, r3, #12
 8000d48:	2a08      	cmp	r2, #8
 8000d4a:	d11a      	bne.n	8000d82 <HAL_RCC_GetSysClockFreq+0x42>
 8000d4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000d50:	fa92 f2a2 	rbit	r2, r2
 8000d54:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000d56:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000d5a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000d5c:	fa90 f0a0 	rbit	r0, r0
 8000d60:	fab0 f080 	clz	r0, r0
 8000d64:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000d68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000d6c:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000d6e:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <HAL_RCC_GetSysClockFreq+0x50>)
 8000d74:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <HAL_RCC_GetSysClockFreq+0x54>)
 8000d78:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000d7c:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000d7e:	4348      	muls	r0, r1
 8000d80:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	08002234 	.word	0x08002234
 8000d90:	08002244 	.word	0x08002244
 8000d94:	007a1200 	.word	0x007a1200

08000d98 <HAL_RCC_ClockConfig>:
{
 8000d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d9c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d9e:	4604      	mov	r4, r0
 8000da0:	b910      	cbnz	r0, 8000da8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000da2:	2001      	movs	r0, #1
 8000da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000da8:	4a4c      	ldr	r2, [pc, #304]	; (8000edc <HAL_RCC_ClockConfig+0x144>)
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d32e      	bcc.n	8000e12 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000db4:	6822      	ldr	r2, [r4, #0]
 8000db6:	0791      	lsls	r1, r2, #30
 8000db8:	d436      	bmi.n	8000e28 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dba:	07d2      	lsls	r2, r2, #31
 8000dbc:	d43c      	bmi.n	8000e38 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dbe:	4a47      	ldr	r2, [pc, #284]	; (8000edc <HAL_RCC_ClockConfig+0x144>)
 8000dc0:	6813      	ldr	r3, [r2, #0]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	429d      	cmp	r5, r3
 8000dc8:	d375      	bcc.n	8000eb6 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dca:	6822      	ldr	r2, [r4, #0]
 8000dcc:	4d44      	ldr	r5, [pc, #272]	; (8000ee0 <HAL_RCC_ClockConfig+0x148>)
 8000dce:	f012 0f04 	tst.w	r2, #4
 8000dd2:	d17c      	bne.n	8000ece <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dd4:	0713      	lsls	r3, r2, #28
 8000dd6:	d506      	bpl.n	8000de6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dd8:	686b      	ldr	r3, [r5, #4]
 8000dda:	6922      	ldr	r2, [r4, #16]
 8000ddc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000de0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000de4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000de6:	f7ff ffab 	bl	8000d40 <HAL_RCC_GetSysClockFreq>
 8000dea:	686b      	ldr	r3, [r5, #4]
 8000dec:	22f0      	movs	r2, #240	; 0xf0
 8000dee:	fa92 f2a2 	rbit	r2, r2
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dfa:	40d3      	lsrs	r3, r2
 8000dfc:	4a39      	ldr	r2, [pc, #228]	; (8000ee4 <HAL_RCC_ClockConfig+0x14c>)
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	40d8      	lsrs	r0, r3
 8000e02:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <HAL_RCC_ClockConfig+0x150>)
 8000e04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e06:	200f      	movs	r0, #15
 8000e08:	f7ff fb8e 	bl	8000528 <HAL_InitTick>
  return HAL_OK;
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e12:	6813      	ldr	r3, [r2, #0]
 8000e14:	f023 0307 	bic.w	r3, r3, #7
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e1c:	6813      	ldr	r3, [r2, #0]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d1bd      	bne.n	8000da2 <HAL_RCC_ClockConfig+0xa>
 8000e26:	e7c5      	b.n	8000db4 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e28:	492d      	ldr	r1, [pc, #180]	; (8000ee0 <HAL_RCC_ClockConfig+0x148>)
 8000e2a:	68a0      	ldr	r0, [r4, #8]
 8000e2c:	684b      	ldr	r3, [r1, #4]
 8000e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e32:	4303      	orrs	r3, r0
 8000e34:	604b      	str	r3, [r1, #4]
 8000e36:	e7c0      	b.n	8000dba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e38:	6862      	ldr	r2, [r4, #4]
 8000e3a:	4e29      	ldr	r6, [pc, #164]	; (8000ee0 <HAL_RCC_ClockConfig+0x148>)
 8000e3c:	2a01      	cmp	r2, #1
 8000e3e:	d127      	bne.n	8000e90 <HAL_RCC_ClockConfig+0xf8>
 8000e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e44:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e48:	6831      	ldr	r1, [r6, #0]
 8000e4a:	fa93 f3a3 	rbit	r3, r3
 8000e4e:	fab3 f383 	clz	r3, r3
 8000e52:	f003 031f 	and.w	r3, r3, #31
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5c:	d0a1      	beq.n	8000da2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e5e:	6873      	ldr	r3, [r6, #4]
 8000e60:	f023 0303 	bic.w	r3, r3, #3
 8000e64:	431a      	orrs	r2, r3
 8000e66:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000e68:	f7ff fba0 	bl	80005ac <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e6c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e70:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e72:	6873      	ldr	r3, [r6, #4]
 8000e74:	6862      	ldr	r2, [r4, #4]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e7e:	d09e      	beq.n	8000dbe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e80:	f7ff fb94 	bl	80005ac <HAL_GetTick>
 8000e84:	1bc0      	subs	r0, r0, r7
 8000e86:	4540      	cmp	r0, r8
 8000e88:	d9f3      	bls.n	8000e72 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000e8a:	2003      	movs	r0, #3
}
 8000e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e90:	2a02      	cmp	r2, #2
 8000e92:	bf0c      	ite	eq
 8000e94:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000e98:	2302      	movne	r3, #2
 8000e9a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9e:	6830      	ldr	r0, [r6, #0]
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	2101      	movs	r1, #1
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	4203      	tst	r3, r0
 8000eb4:	e7d2      	b.n	8000e5c <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb6:	6813      	ldr	r3, [r2, #0]
 8000eb8:	f023 0307 	bic.w	r3, r3, #7
 8000ebc:	432b      	orrs	r3, r5
 8000ebe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ec0:	6813      	ldr	r3, [r2, #0]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	429d      	cmp	r5, r3
 8000ec8:	f47f af6b 	bne.w	8000da2 <HAL_RCC_ClockConfig+0xa>
 8000ecc:	e77d      	b.n	8000dca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ece:	686b      	ldr	r3, [r5, #4]
 8000ed0:	68e1      	ldr	r1, [r4, #12]
 8000ed2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	606b      	str	r3, [r5, #4]
 8000eda:	e77b      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x3c>
 8000edc:	40022000 	.word	0x40022000
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	0800221c 	.word	0x0800221c
 8000ee8:	20000000 	.word	0x20000000

08000eec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000eec:	4b01      	ldr	r3, [pc, #4]	; (8000ef4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000000 	.word	0x20000000

08000ef8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000efa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	fa92 f2a2 	rbit	r2, r2
 8000f04:	fab2 f282 	clz	r2, r2
 8000f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f0c:	40d3      	lsrs	r3, r2
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000f14:	6810      	ldr	r0, [r2, #0]
}    
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	0800222c 	.word	0x0800222c
 8000f24:	20000000 	.word	0x20000000

08000f28 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f2a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	fa92 f2a2 	rbit	r2, r2
 8000f34:	fab2 f282 	clz	r2, r2
 8000f38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000f3c:	40d3      	lsrs	r3, r2
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000f40:	5cd3      	ldrb	r3, [r2, r3]
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000f44:	6810      	ldr	r0, [r2, #0]
} 
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	0800222c 	.word	0x0800222c
 8000f54:	20000000 	.word	0x20000000

08000f58 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f58:	6803      	ldr	r3, [r0, #0]
{
 8000f5a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f5e:	03df      	lsls	r7, r3, #15
{
 8000f60:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f62:	d523      	bpl.n	8000fac <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f64:	4d9b      	ldr	r5, [pc, #620]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f66:	69eb      	ldr	r3, [r5, #28]
 8000f68:	00de      	lsls	r6, r3, #3
 8000f6a:	f100 80d7 	bmi.w	800111c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	69eb      	ldr	r3, [r5, #28]
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61eb      	str	r3, [r5, #28]
 8000f76:	69eb      	ldr	r3, [r5, #28]
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f80:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f82:	4f95      	ldr	r7, [pc, #596]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	05d8      	lsls	r0, r3, #23
 8000f88:	f140 80ca 	bpl.w	8001120 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000f8c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f8e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000f92:	f040 80da 	bne.w	800114a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000f96:	6a2b      	ldr	r3, [r5, #32]
 8000f98:	6862      	ldr	r2, [r4, #4]
 8000f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fa2:	b11e      	cbz	r6, 8000fac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fa4:	69eb      	ldr	r3, [r5, #28]
 8000fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000faa:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000fac:	6820      	ldr	r0, [r4, #0]
 8000fae:	07c3      	lsls	r3, r0, #31
 8000fb0:	d506      	bpl.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000fb2:	4a88      	ldr	r2, [pc, #544]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fb4:	68a1      	ldr	r1, [r4, #8]
 8000fb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fb8:	f023 0303 	bic.w	r3, r3, #3
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000fc0:	0787      	lsls	r7, r0, #30
 8000fc2:	d506      	bpl.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000fc4:	4a83      	ldr	r2, [pc, #524]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fc6:	68e1      	ldr	r1, [r4, #12]
 8000fc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000fce:	430b      	orrs	r3, r1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000fd2:	0746      	lsls	r6, r0, #29
 8000fd4:	d506      	bpl.n	8000fe4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000fd6:	4a7f      	ldr	r2, [pc, #508]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fd8:	6921      	ldr	r1, [r4, #16]
 8000fda:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fdc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000fe4:	0685      	lsls	r5, r0, #26
 8000fe6:	d506      	bpl.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000fe8:	4a7a      	ldr	r2, [pc, #488]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fea:	69e1      	ldr	r1, [r4, #28]
 8000fec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fee:	f023 0310 	bic.w	r3, r3, #16
 8000ff2:	430b      	orrs	r3, r1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000ff6:	0381      	lsls	r1, r0, #14
 8000ff8:	d506      	bpl.n	8001008 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000ffa:	4a76      	ldr	r2, [pc, #472]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ffc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000ffe:	6853      	ldr	r3, [r2, #4]
 8001000:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001004:	430b      	orrs	r3, r1
 8001006:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001008:	0642      	lsls	r2, r0, #25
 800100a:	d506      	bpl.n	800101a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800100c:	4a71      	ldr	r2, [pc, #452]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800100e:	6a21      	ldr	r1, [r4, #32]
 8001010:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001012:	f023 0320 	bic.w	r3, r3, #32
 8001016:	430b      	orrs	r3, r1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800101a:	0343      	lsls	r3, r0, #13
 800101c:	d506      	bpl.n	800102c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800101e:	4a6d      	ldr	r2, [pc, #436]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001020:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001022:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001028:	430b      	orrs	r3, r1
 800102a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800102c:	0707      	lsls	r7, r0, #28
 800102e:	d506      	bpl.n	800103e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001030:	4a68      	ldr	r2, [pc, #416]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001032:	6961      	ldr	r1, [r4, #20]
 8001034:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001036:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800103a:	430b      	orrs	r3, r1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800103e:	06c6      	lsls	r6, r0, #27
 8001040:	d506      	bpl.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001042:	4a64      	ldr	r2, [pc, #400]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001044:	69a1      	ldr	r1, [r4, #24]
 8001046:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001048:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800104c:	430b      	orrs	r3, r1
 800104e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001050:	0585      	lsls	r5, r0, #22
 8001052:	d506      	bpl.n	8001062 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001054:	4a5f      	ldr	r2, [pc, #380]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001056:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001058:	6853      	ldr	r3, [r2, #4]
 800105a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800105e:	430b      	orrs	r3, r1
 8001060:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001062:	0601      	lsls	r1, r0, #24
 8001064:	d506      	bpl.n	8001074 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001066:	4a5b      	ldr	r2, [pc, #364]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001068:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800106a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800106c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001070:	430b      	orrs	r3, r1
 8001072:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001074:	05c2      	lsls	r2, r0, #23
 8001076:	d506      	bpl.n	8001086 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001078:	4a56      	ldr	r2, [pc, #344]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800107a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800107c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800107e:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001082:	430b      	orrs	r3, r1
 8001084:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001086:	04c3      	lsls	r3, r0, #19
 8001088:	d506      	bpl.n	8001098 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800108a:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800108c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800108e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001094:	430b      	orrs	r3, r1
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001098:	0487      	lsls	r7, r0, #18
 800109a:	d506      	bpl.n	80010aa <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800109c:	4a4d      	ldr	r2, [pc, #308]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800109e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80010a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010a6:	430b      	orrs	r3, r1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80010aa:	02c6      	lsls	r6, r0, #11
 80010ac:	d506      	bpl.n	80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80010ae:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80010b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010b8:	430b      	orrs	r3, r1
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80010bc:	0285      	lsls	r5, r0, #10
 80010be:	d506      	bpl.n	80010ce <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80010c0:	4a44      	ldr	r2, [pc, #272]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010c2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80010c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80010ca:	430b      	orrs	r3, r1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80010ce:	0241      	lsls	r1, r0, #9
 80010d0:	d506      	bpl.n	80010e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80010d2:	4a40      	ldr	r2, [pc, #256]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80010d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010dc:	430b      	orrs	r3, r1
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80010e0:	0202      	lsls	r2, r0, #8
 80010e2:	d506      	bpl.n	80010f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80010e4:	4a3b      	ldr	r2, [pc, #236]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80010e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010ee:	430b      	orrs	r3, r1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80010f2:	01c3      	lsls	r3, r0, #7
 80010f4:	d506      	bpl.n	8001104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80010f6:	4a37      	ldr	r2, [pc, #220]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010f8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80010fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001100:	430b      	orrs	r3, r1
 8001102:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001104:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001108:	d01c      	beq.n	8001144 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800110a:	4a32      	ldr	r2, [pc, #200]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800110c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800110e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001110:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001114:	430b      	orrs	r3, r1
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001118:	2000      	movs	r0, #0
 800111a:	e013      	b.n	8001144 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 800111c:	2600      	movs	r6, #0
 800111e:	e730      	b.n	8000f82 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001126:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001128:	f7ff fa40 	bl	80005ac <HAL_GetTick>
 800112c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	05d9      	lsls	r1, r3, #23
 8001132:	f53f af2b 	bmi.w	8000f8c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001136:	f7ff fa39 	bl	80005ac <HAL_GetTick>
 800113a:	eba0 0008 	sub.w	r0, r0, r8
 800113e:	2864      	cmp	r0, #100	; 0x64
 8001140:	d9f5      	bls.n	800112e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8001142:	2003      	movs	r0, #3
}
 8001144:	b002      	add	sp, #8
 8001146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800114a:	6862      	ldr	r2, [r4, #4]
 800114c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001150:	4293      	cmp	r3, r2
 8001152:	f43f af20 	beq.w	8000f96 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001156:	6a29      	ldr	r1, [r5, #32]
 8001158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001160:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001164:	f8df e074 	ldr.w	lr, [pc, #116]	; 80011dc <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001168:	fab2 f282 	clz	r2, r2
 800116c:	4472      	add	r2, lr
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	2701      	movs	r7, #1
 8001172:	6017      	str	r7, [r2, #0]
 8001174:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	4473      	add	r3, lr
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001184:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001186:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001188:	f57f af05 	bpl.w	8000f96 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 800118c:	f7ff fa0e 	bl	80005ac <HAL_GetTick>
 8001190:	f04f 0802 	mov.w	r8, #2
 8001194:	4682      	mov	sl, r0
 8001196:	46c1      	mov	r9, r8
 8001198:	fa98 f3a8 	rbit	r3, r8
 800119c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a0:	b1a3      	cbz	r3, 80011cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80011a2:	6a2a      	ldr	r2, [r5, #32]
 80011a4:	fa99 f3a9 	rbit	r3, r9
 80011a8:	fab3 f383 	clz	r3, r3
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	fa07 f303 	lsl.w	r3, r7, r3
 80011b4:	4213      	tst	r3, r2
 80011b6:	f47f aeee 	bne.w	8000f96 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff f9f7 	bl	80005ac <HAL_GetTick>
 80011be:	f241 3388 	movw	r3, #5000	; 0x1388
 80011c2:	eba0 000a 	sub.w	r0, r0, sl
 80011c6:	4298      	cmp	r0, r3
 80011c8:	d9e6      	bls.n	8001198 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80011ca:	e7ba      	b.n	8001142 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80011cc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80011d2:	e7e7      	b.n	80011a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40007000 	.word	0x40007000
 80011dc:	10908100 	.word	0x10908100

080011e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80011e4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011e6:	6921      	ldr	r1, [r4, #16]
 80011e8:	68a2      	ldr	r2, [r4, #8]
 80011ea:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80011ec:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011ee:	430a      	orrs	r2, r1
 80011f0:	6961      	ldr	r1, [r4, #20]
 80011f2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80011f4:	4977      	ldr	r1, [pc, #476]	; (80013d4 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011f6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80011f8:	4001      	ands	r1, r0
 80011fa:	430a      	orrs	r2, r1
 80011fc:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011fe:	686a      	ldr	r2, [r5, #4]
 8001200:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001202:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001204:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001208:	430a      	orrs	r2, r1
 800120a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800120c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800120e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001210:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001214:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001216:	430a      	orrs	r2, r1
 8001218:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800121a:	4a6f      	ldr	r2, [pc, #444]	; (80013d8 <UART_SetConfig+0x1f8>)
 800121c:	4295      	cmp	r5, r2
 800121e:	d112      	bne.n	8001246 <UART_SetConfig+0x66>
 8001220:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001224:	496d      	ldr	r1, [pc, #436]	; (80013dc <UART_SetConfig+0x1fc>)
 8001226:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001228:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800122c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001230:	5c8a      	ldrb	r2, [r1, r2]
 8001232:	d066      	beq.n	8001302 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001234:	2a08      	cmp	r2, #8
 8001236:	d819      	bhi.n	800126c <UART_SetConfig+0x8c>
 8001238:	e8df f002 	tbb	[pc, r2]
 800123c:	189e92c2 	.word	0x189e92c2
 8001240:	181818a9 	.word	0x181818a9
 8001244:	ac          	.byte	0xac
 8001245:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001246:	4a66      	ldr	r2, [pc, #408]	; (80013e0 <UART_SetConfig+0x200>)
 8001248:	4295      	cmp	r5, r2
 800124a:	d124      	bne.n	8001296 <UART_SetConfig+0xb6>
 800124c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001250:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001252:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001256:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800125a:	f000 80a0 	beq.w	800139e <UART_SetConfig+0x1be>
 800125e:	d807      	bhi.n	8001270 <UART_SetConfig+0x90>
 8001260:	2a00      	cmp	r2, #0
 8001262:	f000 80aa 	beq.w	80013ba <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800126a:	d076      	beq.n	800135a <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800126c:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800126e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001270:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001274:	f000 8099 	beq.w	80013aa <UART_SetConfig+0x1ca>
 8001278:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800127c:	d1f3      	bne.n	8001266 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800127e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001282:	d179      	bne.n	8001378 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001284:	6860      	ldr	r0, [r4, #4]
 8001286:	0843      	lsrs	r3, r0, #1
 8001288:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800128c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001290:	fbb3 f3f0 	udiv	r3, r3, r0
 8001294:	e054      	b.n	8001340 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001296:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <UART_SetConfig+0x204>)
 8001298:	4295      	cmp	r5, r2
 800129a:	d10e      	bne.n	80012ba <UART_SetConfig+0xda>
 800129c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80012a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012a2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80012a6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80012aa:	d078      	beq.n	800139e <UART_SetConfig+0x1be>
 80012ac:	d9d8      	bls.n	8001260 <UART_SetConfig+0x80>
 80012ae:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80012b2:	d07a      	beq.n	80013aa <UART_SetConfig+0x1ca>
 80012b4:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80012b8:	e7e0      	b.n	800127c <UART_SetConfig+0x9c>
 80012ba:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <UART_SetConfig+0x208>)
 80012bc:	4295      	cmp	r5, r2
 80012be:	d10e      	bne.n	80012de <UART_SetConfig+0xfe>
 80012c0:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80012c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012c6:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80012ca:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80012ce:	d066      	beq.n	800139e <UART_SetConfig+0x1be>
 80012d0:	d9c6      	bls.n	8001260 <UART_SetConfig+0x80>
 80012d2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80012d6:	d068      	beq.n	80013aa <UART_SetConfig+0x1ca>
 80012d8:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80012dc:	e7ce      	b.n	800127c <UART_SetConfig+0x9c>
 80012de:	4a43      	ldr	r2, [pc, #268]	; (80013ec <UART_SetConfig+0x20c>)
 80012e0:	4295      	cmp	r5, r2
 80012e2:	d1c0      	bne.n	8001266 <UART_SetConfig+0x86>
 80012e4:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80012e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012ea:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80012ee:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80012f2:	d054      	beq.n	800139e <UART_SetConfig+0x1be>
 80012f4:	d9b4      	bls.n	8001260 <UART_SetConfig+0x80>
 80012f6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80012fa:	d056      	beq.n	80013aa <UART_SetConfig+0x1ca>
 80012fc:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001300:	e7bc      	b.n	800127c <UART_SetConfig+0x9c>
    switch (clocksource)
 8001302:	2a08      	cmp	r2, #8
 8001304:	d829      	bhi.n	800135a <UART_SetConfig+0x17a>
 8001306:	a301      	add	r3, pc, #4	; (adr r3, 800130c <UART_SetConfig+0x12c>)
 8001308:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800130c:	08001331 	.word	0x08001331
 8001310:	08001355 	.word	0x08001355
 8001314:	08001285 	.word	0x08001285
 8001318:	0800135b 	.word	0x0800135b
 800131c:	080013a5 	.word	0x080013a5
 8001320:	0800135b 	.word	0x0800135b
 8001324:	0800135b 	.word	0x0800135b
 8001328:	0800135b 	.word	0x0800135b
 800132c:	080013b1 	.word	0x080013b1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001330:	f7ff fde2 	bl	8000ef8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001334:	6861      	ldr	r1, [r4, #4]
 8001336:	084a      	lsrs	r2, r1, #1
 8001338:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800133c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001340:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001342:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001344:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001348:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800134a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800134e:	4313      	orrs	r3, r2
 8001350:	60cb      	str	r3, [r1, #12]
 8001352:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001354:	f7ff fde8 	bl	8000f28 <HAL_RCC_GetPCLK2Freq>
 8001358:	e7ec      	b.n	8001334 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800135a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800135c:	2300      	movs	r3, #0
 800135e:	e7f1      	b.n	8001344 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001360:	f7ff fde2 	bl	8000f28 <HAL_RCC_GetPCLK2Freq>
 8001364:	6863      	ldr	r3, [r4, #4]
 8001366:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800136a:	fbb0 f0f3 	udiv	r0, r0, r3
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <UART_SetConfig+0x1f8>)
 8001370:	b280      	uxth	r0, r0
 8001372:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001374:	2000      	movs	r0, #0
        break;
 8001376:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001378:	6862      	ldr	r2, [r4, #4]
 800137a:	0853      	lsrs	r3, r2, #1
 800137c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001380:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001384:	fbb3 f3f2 	udiv	r3, r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	60eb      	str	r3, [r5, #12]
 800138c:	e7f2      	b.n	8001374 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800138e:	f7ff fcd7 	bl	8000d40 <HAL_RCC_GetSysClockFreq>
 8001392:	e017      	b.n	80013c4 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001394:	6862      	ldr	r2, [r4, #4]
 8001396:	0853      	lsrs	r3, r2, #1
 8001398:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800139c:	e7f2      	b.n	8001384 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800139e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013a2:	d1f4      	bne.n	800138e <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80013a4:	f7ff fccc 	bl	8000d40 <HAL_RCC_GetSysClockFreq>
 80013a8:	e7c4      	b.n	8001334 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ae:	d1f1      	bne.n	8001394 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013b0:	6860      	ldr	r0, [r4, #4]
 80013b2:	0843      	lsrs	r3, r0, #1
 80013b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80013b8:	e76a      	b.n	8001290 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013be:	d0b7      	beq.n	8001330 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80013c0:	f7ff fd9a 	bl	8000ef8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80013c4:	6863      	ldr	r3, [r4, #4]
 80013c6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80013ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ce:	b280      	uxth	r0, r0
 80013d0:	60e8      	str	r0, [r5, #12]
 80013d2:	e7cf      	b.n	8001374 <UART_SetConfig+0x194>
 80013d4:	efff69f3 	.word	0xefff69f3
 80013d8:	40013800 	.word	0x40013800
 80013dc:	08002254 	.word	0x08002254
 80013e0:	40004400 	.word	0x40004400
 80013e4:	40004800 	.word	0x40004800
 80013e8:	40004c00 	.word	0x40004c00
 80013ec:	40005000 	.word	0x40005000

080013f0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013f2:	07da      	lsls	r2, r3, #31
{
 80013f4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013f6:	d506      	bpl.n	8001406 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013f8:	6801      	ldr	r1, [r0, #0]
 80013fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80013fc:	684a      	ldr	r2, [r1, #4]
 80013fe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001402:	4322      	orrs	r2, r4
 8001404:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001406:	079c      	lsls	r4, r3, #30
 8001408:	d506      	bpl.n	8001418 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800140a:	6801      	ldr	r1, [r0, #0]
 800140c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800140e:	684a      	ldr	r2, [r1, #4]
 8001410:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001414:	4322      	orrs	r2, r4
 8001416:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001418:	0759      	lsls	r1, r3, #29
 800141a:	d506      	bpl.n	800142a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800141c:	6801      	ldr	r1, [r0, #0]
 800141e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001420:	684a      	ldr	r2, [r1, #4]
 8001422:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001426:	4322      	orrs	r2, r4
 8001428:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800142a:	071a      	lsls	r2, r3, #28
 800142c:	d506      	bpl.n	800143c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800142e:	6801      	ldr	r1, [r0, #0]
 8001430:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001432:	684a      	ldr	r2, [r1, #4]
 8001434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001438:	4322      	orrs	r2, r4
 800143a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800143c:	06dc      	lsls	r4, r3, #27
 800143e:	d506      	bpl.n	800144e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001440:	6801      	ldr	r1, [r0, #0]
 8001442:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001444:	688a      	ldr	r2, [r1, #8]
 8001446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800144a:	4322      	orrs	r2, r4
 800144c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800144e:	0699      	lsls	r1, r3, #26
 8001450:	d506      	bpl.n	8001460 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001452:	6801      	ldr	r1, [r0, #0]
 8001454:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001456:	688a      	ldr	r2, [r1, #8]
 8001458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800145c:	4322      	orrs	r2, r4
 800145e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001460:	065a      	lsls	r2, r3, #25
 8001462:	d50f      	bpl.n	8001484 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001464:	6801      	ldr	r1, [r0, #0]
 8001466:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001468:	684a      	ldr	r2, [r1, #4]
 800146a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800146e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001470:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001474:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001476:	d105      	bne.n	8001484 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001478:	684a      	ldr	r2, [r1, #4]
 800147a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800147c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001480:	4322      	orrs	r2, r4
 8001482:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001484:	061b      	lsls	r3, r3, #24
 8001486:	d506      	bpl.n	8001496 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001488:	6802      	ldr	r2, [r0, #0]
 800148a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800148c:	6853      	ldr	r3, [r2, #4]
 800148e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001492:	430b      	orrs	r3, r1
 8001494:	6053      	str	r3, [r2, #4]
 8001496:	bd10      	pop	{r4, pc}

08001498 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800149c:	9d06      	ldr	r5, [sp, #24]
 800149e:	4604      	mov	r4, r0
 80014a0:	460f      	mov	r7, r1
 80014a2:	4616      	mov	r6, r2
 80014a4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014a6:	6821      	ldr	r1, [r4, #0]
 80014a8:	69ca      	ldr	r2, [r1, #28]
 80014aa:	ea37 0302 	bics.w	r3, r7, r2
 80014ae:	bf0c      	ite	eq
 80014b0:	2201      	moveq	r2, #1
 80014b2:	2200      	movne	r2, #0
 80014b4:	42b2      	cmp	r2, r6
 80014b6:	d002      	beq.n	80014be <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80014b8:	2000      	movs	r0, #0
}
 80014ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80014be:	1c6b      	adds	r3, r5, #1
 80014c0:	d0f2      	beq.n	80014a8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014c2:	b99d      	cbnz	r5, 80014ec <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80014cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	f022 0201 	bic.w	r2, r2, #1
 80014d4:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80014d6:	2320      	movs	r3, #32
 80014d8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80014dc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80014e0:	2300      	movs	r3, #0
 80014e2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80014e6:	2003      	movs	r0, #3
 80014e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014ec:	f7ff f85e 	bl	80005ac <HAL_GetTick>
 80014f0:	eba0 0008 	sub.w	r0, r0, r8
 80014f4:	4285      	cmp	r5, r0
 80014f6:	d2d6      	bcs.n	80014a6 <UART_WaitOnFlagUntilTimeout+0xe>
 80014f8:	e7e4      	b.n	80014c4 <UART_WaitOnFlagUntilTimeout+0x2c>

080014fa <UART_CheckIdleState>:
{
 80014fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014fc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014fe:	2600      	movs	r6, #0
 8001500:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001502:	f7ff f853 	bl	80005ac <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800150c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800150e:	d417      	bmi.n	8001540 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	075b      	lsls	r3, r3, #29
 8001516:	d50a      	bpl.n	800152e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2200      	movs	r2, #0
 8001520:	462b      	mov	r3, r5
 8001522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff ffb6 	bl	8001498 <UART_WaitOnFlagUntilTimeout>
 800152c:	b9a0      	cbnz	r0, 8001558 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800152e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001530:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001532:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001536:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800153a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800153e:	e00c      	b.n	800155a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	4632      	mov	r2, r6
 8001548:	4603      	mov	r3, r0
 800154a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff ffa2 	bl	8001498 <UART_WaitOnFlagUntilTimeout>
 8001554:	2800      	cmp	r0, #0
 8001556:	d0db      	beq.n	8001510 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001558:	2003      	movs	r0, #3
}
 800155a:	b002      	add	sp, #8
 800155c:	bd70      	pop	{r4, r5, r6, pc}

0800155e <HAL_UART_Init>:
{
 800155e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001560:	4604      	mov	r4, r0
 8001562:	b360      	cbz	r0, 80015be <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001564:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001568:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800156c:	b91b      	cbnz	r3, 8001576 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800156e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001572:	f7fe ff79 	bl	8000468 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001576:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001578:	2324      	movs	r3, #36	; 0x24
 800157a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff fe2a 	bl	80011e0 <UART_SetConfig>
 800158c:	2801      	cmp	r0, #1
 800158e:	d016      	beq.n	80015be <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001592:	b113      	cbz	r3, 800159a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff ff2b 	bl	80013f0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015aa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80015b2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80015ba:	f7ff bf9e 	b.w	80014fa <UART_CheckIdleState>
}
 80015be:	2001      	movs	r0, #1
 80015c0:	bd10      	pop	{r4, pc}

080015c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80015c2:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80015c4:	f000 fbe6 	bl	8001d94 <vTaskStartScheduler>
  
  return osOK;
}
 80015c8:	2000      	movs	r0, #0
 80015ca:	bd08      	pop	{r3, pc}

080015cc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80015cc:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015ce:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80015d2:	8a02      	ldrh	r2, [r0, #16]
{
 80015d4:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015d6:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80015da:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80015dc:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80015de:	bf14      	ite	ne
 80015e0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80015e2:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015e4:	a803      	add	r0, sp, #12
 80015e6:	9001      	str	r0, [sp, #4]
 80015e8:	9400      	str	r4, [sp, #0]
 80015ea:	4628      	mov	r0, r5
 80015ec:	f000 fb02 	bl	8001bf4 <xTaskCreate>
 80015f0:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80015f2:	bf0c      	ite	eq
 80015f4:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80015f6:	2000      	movne	r0, #0
}
 80015f8:	b005      	add	sp, #20
 80015fa:	bd30      	pop	{r4, r5, pc}

080015fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80015fc:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80015fe:	2800      	cmp	r0, #0
 8001600:	bf08      	it	eq
 8001602:	2001      	moveq	r0, #1
 8001604:	f000 fd14 	bl	8002030 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001608:	2000      	movs	r0, #0
 800160a:	bd08      	pop	{r3, pc}

0800160c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800160c:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800160e:	f000 fda7 	bl	8002160 <xTaskGetSchedulerState>
 8001612:	2801      	cmp	r0, #1
 8001614:	d003      	beq.n	800161e <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800161a:	f000 b9f3 	b.w	8001a04 <xPortSysTickHandler>
 800161e:	bd08      	pop	{r3, pc}

08001620 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001620:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <prvInsertBlockIntoFreeList+0x40>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4282      	cmp	r2, r0
 8001628:	d318      	bcc.n	800165c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800162a:	685c      	ldr	r4, [r3, #4]
 800162c:	1919      	adds	r1, r3, r4
 800162e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001630:	bf01      	itttt	eq
 8001632:	6841      	ldreq	r1, [r0, #4]
 8001634:	4618      	moveq	r0, r3
 8001636:	1909      	addeq	r1, r1, r4
 8001638:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800163a:	6844      	ldr	r4, [r0, #4]
 800163c:	1901      	adds	r1, r0, r4
 800163e:	428a      	cmp	r2, r1
 8001640:	d107      	bne.n	8001652 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <prvInsertBlockIntoFreeList+0x44>)
 8001644:	6809      	ldr	r1, [r1, #0]
 8001646:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001648:	bf1f      	itttt	ne
 800164a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800164c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800164e:	1909      	addne	r1, r1, r4
 8001650:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001652:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001654:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001656:	bf18      	it	ne
 8001658:	6018      	strne	r0, [r3, #0]
 800165a:	bd10      	pop	{r4, pc}
 800165c:	4613      	mov	r3, r2
 800165e:	e7e1      	b.n	8001624 <prvInsertBlockIntoFreeList+0x4>
 8001660:	20000c3c 	.word	0x20000c3c
 8001664:	2000002c 	.word	0x2000002c

08001668 <pvPortMalloc>:
{
 8001668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800166c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800166e:	f000 fbcd 	bl	8001e0c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001672:	493e      	ldr	r1, [pc, #248]	; (800176c <pvPortMalloc+0x104>)
 8001674:	4d3e      	ldr	r5, [pc, #248]	; (8001770 <pvPortMalloc+0x108>)
 8001676:	680b      	ldr	r3, [r1, #0]
 8001678:	bb0b      	cbnz	r3, 80016be <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800167a:	4a3e      	ldr	r2, [pc, #248]	; (8001774 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800167c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800167e:	bf1f      	itttt	ne
 8001680:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001682:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001686:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
 800168a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800168c:	bf14      	ite	ne
 800168e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001690:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001694:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001696:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001698:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800169c:	4e36      	ldr	r6, [pc, #216]	; (8001778 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800169e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80016a0:	2000      	movs	r0, #0
 80016a2:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016a4:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80016a6:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80016a8:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80016aa:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80016ac:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016ae:	4b33      	ldr	r3, [pc, #204]	; (800177c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80016b0:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016b2:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <pvPortMalloc+0x118>)
 80016b6:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80016b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016bc:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80016be:	682f      	ldr	r7, [r5, #0]
 80016c0:	4227      	tst	r7, r4
 80016c2:	d116      	bne.n	80016f2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80016c4:	2c00      	cmp	r4, #0
 80016c6:	d041      	beq.n	800174c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80016c8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80016cc:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80016ce:	bf1c      	itt	ne
 80016d0:	f023 0307 	bicne.w	r3, r3, #7
 80016d4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80016d6:	b163      	cbz	r3, 80016f2 <pvPortMalloc+0x8a>
 80016d8:	4a29      	ldr	r2, [pc, #164]	; (8001780 <pvPortMalloc+0x118>)
 80016da:	6816      	ldr	r6, [r2, #0]
 80016dc:	42b3      	cmp	r3, r6
 80016de:	4690      	mov	r8, r2
 80016e0:	d807      	bhi.n	80016f2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80016e2:	4a25      	ldr	r2, [pc, #148]	; (8001778 <pvPortMalloc+0x110>)
 80016e4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016e6:	6868      	ldr	r0, [r5, #4]
 80016e8:	4283      	cmp	r3, r0
 80016ea:	d804      	bhi.n	80016f6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80016ec:	6809      	ldr	r1, [r1, #0]
 80016ee:	428d      	cmp	r5, r1
 80016f0:	d107      	bne.n	8001702 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80016f2:	2400      	movs	r4, #0
 80016f4:	e02a      	b.n	800174c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016f6:	682c      	ldr	r4, [r5, #0]
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	d0f7      	beq.n	80016ec <pvPortMalloc+0x84>
 80016fc:	462a      	mov	r2, r5
 80016fe:	4625      	mov	r5, r4
 8001700:	e7f1      	b.n	80016e6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001702:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001704:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001706:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001708:	1ac2      	subs	r2, r0, r3
 800170a:	2a10      	cmp	r2, #16
 800170c:	d90f      	bls.n	800172e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800170e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001710:	0741      	lsls	r1, r0, #29
 8001712:	d008      	beq.n	8001726 <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001718:	f383 8811 	msr	BASEPRI, r3
 800171c:	f3bf 8f6f 	isb	sy
 8001720:	f3bf 8f4f 	dsb	sy
 8001724:	e7fe      	b.n	8001724 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001726:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001728:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800172a:	f7ff ff79 	bl	8001620 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800172e:	4913      	ldr	r1, [pc, #76]	; (800177c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001730:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001732:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001734:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001736:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001738:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800173a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800173e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001742:	bf38      	it	cc
 8001744:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001746:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001748:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800174a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800174c:	f000 fbf8 	bl	8001f40 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001750:	0763      	lsls	r3, r4, #29
 8001752:	d008      	beq.n	8001766 <pvPortMalloc+0xfe>
 8001754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001758:	f383 8811 	msr	BASEPRI, r3
 800175c:	f3bf 8f6f 	isb	sy
 8001760:	f3bf 8f4f 	dsb	sy
 8001764:	e7fe      	b.n	8001764 <pvPortMalloc+0xfc>
}
 8001766:	4620      	mov	r0, r4
 8001768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800176c:	2000002c 	.word	0x2000002c
 8001770:	20000c30 	.word	0x20000c30
 8001774:	20000030 	.word	0x20000030
 8001778:	20000c3c 	.word	0x20000c3c
 800177c:	20000c38 	.word	0x20000c38
 8001780:	20000c34 	.word	0x20000c34

08001784 <vPortFree>:
{
 8001784:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001786:	4604      	mov	r4, r0
 8001788:	b370      	cbz	r0, 80017e8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800178a:	4a18      	ldr	r2, [pc, #96]	; (80017ec <vPortFree+0x68>)
 800178c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	4213      	tst	r3, r2
 8001794:	d108      	bne.n	80017a8 <vPortFree+0x24>
 8001796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179a:	f383 8811 	msr	BASEPRI, r3
 800179e:	f3bf 8f6f 	isb	sy
 80017a2:	f3bf 8f4f 	dsb	sy
 80017a6:	e7fe      	b.n	80017a6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017a8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80017ac:	b141      	cbz	r1, 80017c0 <vPortFree+0x3c>
 80017ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b2:	f383 8811 	msr	BASEPRI, r3
 80017b6:	f3bf 8f6f 	isb	sy
 80017ba:	f3bf 8f4f 	dsb	sy
 80017be:	e7fe      	b.n	80017be <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80017c0:	ea23 0302 	bic.w	r3, r3, r2
 80017c4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80017c8:	f000 fb20 	bl	8001e0c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80017cc:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <vPortFree+0x6c>)
 80017ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80017d2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80017d4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80017d8:	440b      	add	r3, r1
 80017da:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80017dc:	f7ff ff20 	bl	8001620 <prvInsertBlockIntoFreeList>
}
 80017e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80017e4:	f000 bbac 	b.w	8001f40 <xTaskResumeAll>
 80017e8:	bd10      	pop	{r4, pc}
 80017ea:	bf00      	nop
 80017ec:	20000c30 	.word	0x20000c30
 80017f0:	20000c34 	.word	0x20000c34

080017f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017f4:	f100 0308 	add.w	r3, r0, #8
 80017f8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017fa:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017fe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001800:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001802:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001804:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001806:	6003      	str	r3, [r0, #0]
 8001808:	4770      	bx	lr

0800180a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800180a:	2300      	movs	r3, #0
 800180c:	6103      	str	r3, [r0, #16]
 800180e:	4770      	bx	lr

08001810 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001810:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001812:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800181c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800181e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001820:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001822:	3301      	adds	r3, #1
 8001824:	6003      	str	r3, [r0, #0]
 8001826:	4770      	bx	lr

08001828 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001828:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800182a:	1c53      	adds	r3, r2, #1
{
 800182c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800182e:	d10a      	bne.n	8001846 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001830:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001836:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001838:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800183a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800183c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800183e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001840:	3301      	adds	r3, #1
 8001842:	6003      	str	r3, [r0, #0]
 8001844:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001846:	f100 0308 	add.w	r3, r0, #8
 800184a:	685c      	ldr	r4, [r3, #4]
 800184c:	6825      	ldr	r5, [r4, #0]
 800184e:	42aa      	cmp	r2, r5
 8001850:	d3ef      	bcc.n	8001832 <vListInsert+0xa>
 8001852:	4623      	mov	r3, r4
 8001854:	e7f9      	b.n	800184a <vListInsert+0x22>

08001856 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001856:	6841      	ldr	r1, [r0, #4]
 8001858:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800185a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800185c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800185e:	6882      	ldr	r2, [r0, #8]
 8001860:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001866:	bf08      	it	eq
 8001868:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800186a:	2200      	movs	r2, #0
 800186c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	3801      	subs	r0, #1
 8001872:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001874:	4770      	bx	lr
	...

08001878 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <prvTaskExitError+0x2c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	d008      	beq.n	8001892 <prvTaskExitError+0x1a>
 8001880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001884:	f383 8811 	msr	BASEPRI, r3
 8001888:	f3bf 8f6f 	isb	sy
 800188c:	f3bf 8f4f 	dsb	sy
 8001890:	e7fe      	b.n	8001890 <prvTaskExitError+0x18>
 8001892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	f3bf 8f6f 	isb	sy
 800189e:	f3bf 8f4f 	dsb	sy
 80018a2:	e7fe      	b.n	80018a2 <prvTaskExitError+0x2a>
 80018a4:	2000000c 	.word	0x2000000c

080018a8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80018a8:	4806      	ldr	r0, [pc, #24]	; (80018c4 <prvPortStartFirstTask+0x1c>)
 80018aa:	6800      	ldr	r0, [r0, #0]
 80018ac:	6800      	ldr	r0, [r0, #0]
 80018ae:	f380 8808 	msr	MSP, r0
 80018b2:	b662      	cpsie	i
 80018b4:	b661      	cpsie	f
 80018b6:	f3bf 8f4f 	dsb	sy
 80018ba:	f3bf 8f6f 	isb	sy
 80018be:	df00      	svc	0
 80018c0:	bf00      	nop
 80018c2:	0000      	.short	0x0000
 80018c4:	e000ed08 	.word	0xe000ed08

080018c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80018c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80018d8 <vPortEnableVFP+0x10>
 80018cc:	6801      	ldr	r1, [r0, #0]
 80018ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80018d2:	6001      	str	r1, [r0, #0]
 80018d4:	4770      	bx	lr
 80018d6:	0000      	.short	0x0000
 80018d8:	e000ed88 	.word	0xe000ed88

080018dc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80018dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018e0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <pxPortInitialiseStack+0x28>)
 80018e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80018ea:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80018ee:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80018f2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80018f6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80018fa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80018fe:	3844      	subs	r0, #68	; 0x44
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	08001879 	.word	0x08001879
	...

08001910 <SVC_Handler>:
	__asm volatile (
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <pxCurrentTCBConst2>)
 8001912:	6819      	ldr	r1, [r3, #0]
 8001914:	6808      	ldr	r0, [r1, #0]
 8001916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800191a:	f380 8809 	msr	PSP, r0
 800191e:	f3bf 8f6f 	isb	sy
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	f380 8811 	msr	BASEPRI, r0
 800192a:	4770      	bx	lr
 800192c:	f3af 8000 	nop.w

08001930 <pxCurrentTCBConst2>:
 8001930:	20000c4c 	.word	0x20000c4c

08001934 <vPortEnterCritical>:
 8001934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001938:	f383 8811 	msr	BASEPRI, r3
 800193c:	f3bf 8f6f 	isb	sy
 8001940:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <vPortEnterCritical+0x3c>)
 8001946:	6813      	ldr	r3, [r2, #0]
 8001948:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800194a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800194c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800194e:	d10d      	bne.n	800196c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <vPortEnterCritical+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001958:	d008      	beq.n	800196c <vPortEnterCritical+0x38>
 800195a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800195e:	f383 8811 	msr	BASEPRI, r3
 8001962:	f3bf 8f6f 	isb	sy
 8001966:	f3bf 8f4f 	dsb	sy
 800196a:	e7fe      	b.n	800196a <vPortEnterCritical+0x36>
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2000000c 	.word	0x2000000c
 8001974:	e000ed04 	.word	0xe000ed04

08001978 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001978:	4a08      	ldr	r2, [pc, #32]	; (800199c <vPortExitCritical+0x24>)
 800197a:	6813      	ldr	r3, [r2, #0]
 800197c:	b943      	cbnz	r3, 8001990 <vPortExitCritical+0x18>
 800197e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001982:	f383 8811 	msr	BASEPRI, r3
 8001986:	f3bf 8f6f 	isb	sy
 800198a:	f3bf 8f4f 	dsb	sy
 800198e:	e7fe      	b.n	800198e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001990:	3b01      	subs	r3, #1
 8001992:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001994:	b90b      	cbnz	r3, 800199a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001996:	f383 8811 	msr	BASEPRI, r3
 800199a:	4770      	bx	lr
 800199c:	2000000c 	.word	0x2000000c

080019a0 <PendSV_Handler>:
	__asm volatile
 80019a0:	f3ef 8009 	mrs	r0, PSP
 80019a4:	f3bf 8f6f 	isb	sy
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <pxCurrentTCBConst>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	f01e 0f10 	tst.w	lr, #16
 80019b0:	bf08      	it	eq
 80019b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80019b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ba:	6010      	str	r0, [r2, #0]
 80019bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80019c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80019c4:	f380 8811 	msr	BASEPRI, r0
 80019c8:	f3bf 8f4f 	dsb	sy
 80019cc:	f3bf 8f6f 	isb	sy
 80019d0:	f000 fb8c 	bl	80020ec <vTaskSwitchContext>
 80019d4:	f04f 0000 	mov.w	r0, #0
 80019d8:	f380 8811 	msr	BASEPRI, r0
 80019dc:	bc08      	pop	{r3}
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	6808      	ldr	r0, [r1, #0]
 80019e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e6:	f01e 0f10 	tst.w	lr, #16
 80019ea:	bf08      	it	eq
 80019ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80019f0:	f380 8809 	msr	PSP, r0
 80019f4:	f3bf 8f6f 	isb	sy
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	f3af 8000 	nop.w

08001a00 <pxCurrentTCBConst>:
 8001a00:	20000c4c 	.word	0x20000c4c

08001a04 <xPortSysTickHandler>:
{
 8001a04:	b508      	push	{r3, lr}
	__asm volatile
 8001a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0a:	f383 8811 	msr	BASEPRI, r3
 8001a0e:	f3bf 8f6f 	isb	sy
 8001a12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001a16:	f000 fa01 	bl	8001e1c <xTaskIncrementTick>
 8001a1a:	b118      	cbz	r0, 8001a24 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <xPortSysTickHandler+0x28>)
 8001a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a22:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001a24:	2300      	movs	r3, #0
 8001a26:	f383 8811 	msr	BASEPRI, r3
 8001a2a:	bd08      	pop	{r3, pc}
 8001a2c:	e000ed04 	.word	0xe000ed04

08001a30 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <vPortSetupTimerInterrupt+0x1c>)
 8001a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <vPortSetupTimerInterrupt+0x20>)
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <vPortSetupTimerInterrupt+0x24>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	e000e014 	.word	0xe000e014
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <xPortStartScheduler+0xc8>)
 8001a5a:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <xPortStartScheduler+0xcc>)
{
 8001a5c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	4291      	cmp	r1, r2
 8001a62:	d108      	bne.n	8001a76 <xPortStartScheduler+0x1e>
	__asm volatile
 8001a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a68:	f383 8811 	msr	BASEPRI, r3
 8001a6c:	f3bf 8f6f 	isb	sy
 8001a70:	f3bf 8f4f 	dsb	sy
 8001a74:	e7fe      	b.n	8001a74 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <xPortStartScheduler+0xd0>)
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d108      	bne.n	8001a90 <xPortStartScheduler+0x38>
 8001a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	e7fe      	b.n	8001a8e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001a90:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <xPortStartScheduler+0xd4>)
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001a98:	22ff      	movs	r2, #255	; 0xff
 8001a9a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001a9c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001a9e:	4a24      	ldr	r2, [pc, #144]	; (8001b30 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001aa6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001aaa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001aae:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <xPortStartScheduler+0xdc>)
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001abc:	0600      	lsls	r0, r0, #24
 8001abe:	f102 34ff 	add.w	r4, r2, #4294967295
 8001ac2:	d423      	bmi.n	8001b0c <xPortStartScheduler+0xb4>
 8001ac4:	b101      	cbz	r1, 8001ac8 <xPortStartScheduler+0x70>
 8001ac6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001acc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001ad0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001ad2:	9b01      	ldr	r3, [sp, #4]
 8001ad4:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <xPortStartScheduler+0xd4>)
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <xPortStartScheduler+0xe0>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001ae2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001aea:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001aec:	f7ff ffa0 	bl	8001a30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <xPortStartScheduler+0xe4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001af6:	f7ff fee7 	bl	80018c8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001afa:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <xPortStartScheduler+0xe8>)
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001b02:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001b04:	f7ff fed0 	bl	80018a8 <prvPortStartFirstTask>
	prvTaskExitError();
 8001b08:	f7ff feb6 	bl	8001878 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001b0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001b10:	0052      	lsls	r2, r2, #1
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	f88d 2003 	strb.w	r2, [sp, #3]
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	e7cc      	b.n	8001ab8 <xPortStartScheduler+0x60>
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00
 8001b24:	410fc271 	.word	0x410fc271
 8001b28:	410fc270 	.word	0x410fc270
 8001b2c:	e000e400 	.word	0xe000e400
 8001b30:	20000c44 	.word	0x20000c44
 8001b34:	20000c48 	.word	0x20000c48
 8001b38:	e000ed20 	.word	0xe000ed20
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	e000ef34 	.word	0xe000ef34

08001b44 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b44:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <prvResetNextTaskUnblockTime+0x1c>)
 8001b46:	6813      	ldr	r3, [r2, #0]
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <prvResetNextTaskUnblockTime+0x20>)
 8001b4c:	b919      	cbnz	r1, 8001b56 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b4e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b5a:	68d2      	ldr	r2, [r2, #12]
 8001b5c:	6852      	ldr	r2, [r2, #4]
 8001b5e:	e7f8      	b.n	8001b52 <prvResetNextTaskUnblockTime+0xe>
 8001b60:	20000c50 	.word	0x20000c50
 8001b64:	20000d28 	.word	0x20000d28

08001b68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b6c:	4e1b      	ldr	r6, [pc, #108]	; (8001bdc <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001b6e:	681d      	ldr	r5, [r3, #0]
{
 8001b70:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b72:	6830      	ldr	r0, [r6, #0]
 8001b74:	3004      	adds	r0, #4
{
 8001b76:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b78:	f7ff fe6d 	bl	8001856 <uxListRemove>
 8001b7c:	4633      	mov	r3, r6
 8001b7e:	b940      	cbnz	r0, 8001b92 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001b80:	6831      	ldr	r1, [r6, #0]
 8001b82:	4e17      	ldr	r6, [pc, #92]	; (8001be0 <prvAddCurrentTaskToDelayedList+0x78>)
 8001b84:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001b86:	6832      	ldr	r2, [r6, #0]
 8001b88:	2001      	movs	r0, #1
 8001b8a:	4088      	lsls	r0, r1
 8001b8c:	ea22 0200 	bic.w	r2, r2, r0
 8001b90:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b92:	1c62      	adds	r2, r4, #1
 8001b94:	d107      	bne.n	8001ba6 <prvAddCurrentTaskToDelayedList+0x3e>
 8001b96:	b137      	cbz	r7, 8001ba6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	4812      	ldr	r0, [pc, #72]	; (8001be4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001b9c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ba2:	f7ff be35 	b.w	8001810 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001ba6:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ba8:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001baa:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001bac:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001bae:	d907      	bls.n	8001bc0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <prvAddCurrentTaskToDelayedList+0x80>)
 8001bb2:	6810      	ldr	r0, [r2, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
}
 8001bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bba:	3104      	adds	r1, #4
 8001bbc:	f7ff be34 	b.w	8001828 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <prvAddCurrentTaskToDelayedList+0x84>)
 8001bc2:	6810      	ldr	r0, [r2, #0]
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	3104      	adds	r1, #4
 8001bc8:	f7ff fe2e 	bl	8001828 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <prvAddCurrentTaskToDelayedList+0x88>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001bd2:	bf38      	it	cc
 8001bd4:	601c      	strcc	r4, [r3, #0]
 8001bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bd8:	20000d70 	.word	0x20000d70
 8001bdc:	20000c4c 	.word	0x20000c4c
 8001be0:	20000cf8 	.word	0x20000cf8
 8001be4:	20000d48 	.word	0x20000d48
 8001be8:	20000c54 	.word	0x20000c54
 8001bec:	20000c50 	.word	0x20000c50
 8001bf0:	20000d28 	.word	0x20000d28

08001bf4 <xTaskCreate>:
	{
 8001bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bf8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001bfc:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bfe:	4650      	mov	r0, sl
	{
 8001c00:	460f      	mov	r7, r1
 8001c02:	4699      	mov	r9, r3
 8001c04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c06:	f7ff fd2f 	bl	8001668 <pvPortMalloc>
			if( pxStack != NULL )
 8001c0a:	4605      	mov	r5, r0
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	f000 8096 	beq.w	8001d3e <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c12:	2054      	movs	r0, #84	; 0x54
 8001c14:	f7ff fd28 	bl	8001668 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001c18:	4604      	mov	r4, r0
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	f000 808c 	beq.w	8001d38 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001c20:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001c24:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001c26:	4455      	add	r5, sl
 8001c28:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001c2a:	f025 0a07 	bic.w	sl, r5, #7
 8001c2e:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001c32:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c34:	7859      	ldrb	r1, [r3, #1]
 8001c36:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001c3a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001c3e:	b109      	cbz	r1, 8001c44 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c40:	42bb      	cmp	r3, r7
 8001c42:	d1f7      	bne.n	8001c34 <xTaskCreate+0x40>
 8001c44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001c46:	2d06      	cmp	r5, #6
 8001c48:	bf28      	it	cs
 8001c4a:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c4c:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c50:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001c52:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001c54:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c56:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c58:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001c5c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c60:	f7ff fdd3 	bl	800180a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c64:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c68:	f104 0018 	add.w	r0, r4, #24
 8001c6c:	f7ff fdcd 	bl	800180a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001c70:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c74:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c76:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c78:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001c7a:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c7e:	464a      	mov	r2, r9
 8001c80:	4641      	mov	r1, r8
 8001c82:	4650      	mov	r0, sl
 8001c84:	f7ff fe2a 	bl	80018dc <pxPortInitialiseStack>
 8001c88:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001c8a:	b106      	cbz	r6, 8001c8e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c8c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001c8e:	f7ff fe51 	bl	8001934 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001c92:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001c94:	4e32      	ldr	r6, [pc, #200]	; (8001d60 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001d8c <xTaskCreate+0x198>
 8001c9c:	3201      	adds	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001ca0:	6835      	ldr	r5, [r6, #0]
 8001ca2:	2d00      	cmp	r5, #0
 8001ca4:	d14e      	bne.n	8001d44 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001ca6:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d11d      	bne.n	8001cea <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001cae:	eb08 0005 	add.w	r0, r8, r5
 8001cb2:	3514      	adds	r5, #20
 8001cb4:	f7ff fd9e 	bl	80017f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cb8:	2d8c      	cmp	r5, #140	; 0x8c
 8001cba:	d1f8      	bne.n	8001cae <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001cbc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001d90 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001cc0:	4d28      	ldr	r5, [pc, #160]	; (8001d64 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001cc2:	4648      	mov	r0, r9
 8001cc4:	f7ff fd96 	bl	80017f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001cc8:	4628      	mov	r0, r5
 8001cca:	f7ff fd93 	bl	80017f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001cce:	4826      	ldr	r0, [pc, #152]	; (8001d68 <xTaskCreate+0x174>)
 8001cd0:	f7ff fd90 	bl	80017f4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001cd4:	4825      	ldr	r0, [pc, #148]	; (8001d6c <xTaskCreate+0x178>)
 8001cd6:	f7ff fd8d 	bl	80017f4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001cda:	4825      	ldr	r0, [pc, #148]	; (8001d70 <xTaskCreate+0x17c>)
 8001cdc:	f7ff fd8a 	bl	80017f4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <xTaskCreate+0x180>)
 8001ce2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <xTaskCreate+0x184>)
 8001ce8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001cea:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001cec:	4924      	ldr	r1, [pc, #144]	; (8001d80 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001cee:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001cf0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001cf6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cf8:	2501      	movs	r5, #1
 8001cfa:	fa05 f302 	lsl.w	r3, r5, r2
 8001cfe:	4303      	orrs	r3, r0
 8001d00:	2014      	movs	r0, #20
 8001d02:	600b      	str	r3, [r1, #0]
 8001d04:	fb00 8002 	mla	r0, r0, r2, r8
 8001d08:	4639      	mov	r1, r7
 8001d0a:	f7ff fd81 	bl	8001810 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001d0e:	f7ff fe33 	bl	8001978 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <xTaskCreate+0x190>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b163      	cbz	r3, 8001d32 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d18:	6833      	ldr	r3, [r6, #0]
 8001d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d207      	bcs.n	8001d32 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <xTaskCreate+0x194>)
 8001d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	f3bf 8f6f 	isb	sy
	}
 8001d32:	4628      	mov	r0, r5
 8001d34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001d38:	4628      	mov	r0, r5
 8001d3a:	f7ff fd23 	bl	8001784 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d3e:	f04f 35ff 	mov.w	r5, #4294967295
 8001d42:	e7f6      	b.n	8001d32 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <xTaskCreate+0x190>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ce      	bne.n	8001cea <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d4c:	6833      	ldr	r3, [r6, #0]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d52:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001d54:	bf98      	it	ls
 8001d56:	6034      	strls	r4, [r6, #0]
 8001d58:	e7c7      	b.n	8001cea <xTaskCreate+0xf6>
 8001d5a:	bf00      	nop
 8001d5c:	20000ce4 	.word	0x20000ce4
 8001d60:	20000c4c 	.word	0x20000c4c
 8001d64:	20000d10 	.word	0x20000d10
 8001d68:	20000d30 	.word	0x20000d30
 8001d6c:	20000d5c 	.word	0x20000d5c
 8001d70:	20000d48 	.word	0x20000d48
 8001d74:	20000c50 	.word	0x20000c50
 8001d78:	20000c54 	.word	0x20000c54
 8001d7c:	20000cf4 	.word	0x20000cf4
 8001d80:	20000cf8 	.word	0x20000cf8
 8001d84:	20000d44 	.word	0x20000d44
 8001d88:	e000ed04 	.word	0xe000ed04
 8001d8c:	20000c58 	.word	0x20000c58
 8001d90:	20000cfc 	.word	0x20000cfc

08001d94 <vTaskStartScheduler>:
{
 8001d94:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <vTaskStartScheduler+0x60>)
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	2400      	movs	r4, #0
 8001d9c:	9400      	str	r4, [sp, #0]
 8001d9e:	4623      	mov	r3, r4
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	4915      	ldr	r1, [pc, #84]	; (8001df8 <vTaskStartScheduler+0x64>)
 8001da4:	4815      	ldr	r0, [pc, #84]	; (8001dfc <vTaskStartScheduler+0x68>)
 8001da6:	f7ff ff25 	bl	8001bf4 <xTaskCreate>
	if( xReturn == pdPASS )
 8001daa:	2801      	cmp	r0, #1
 8001dac:	d114      	bne.n	8001dd8 <vTaskStartScheduler+0x44>
 8001dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <vTaskStartScheduler+0x6c>)
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <vTaskStartScheduler+0x70>)
 8001dc8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <vTaskStartScheduler+0x74>)
 8001dcc:	601c      	str	r4, [r3, #0]
}
 8001dce:	b002      	add	sp, #8
 8001dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001dd4:	f7ff be40 	b.w	8001a58 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dd8:	3001      	adds	r0, #1
 8001dda:	d108      	bne.n	8001dee <vTaskStartScheduler+0x5a>
 8001ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	e7fe      	b.n	8001dec <vTaskStartScheduler+0x58>
}
 8001dee:	b002      	add	sp, #8
 8001df0:	bd10      	pop	{r4, pc}
 8001df2:	bf00      	nop
 8001df4:	20000d24 	.word	0x20000d24
 8001df8:	08002258 	.word	0x08002258
 8001dfc:	08002079 	.word	0x08002079
 8001e00:	20000d28 	.word	0x20000d28
 8001e04:	20000d44 	.word	0x20000d44
 8001e08:	20000d70 	.word	0x20000d70

08001e0c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001e0c:	4a02      	ldr	r2, [pc, #8]	; (8001e18 <vTaskSuspendAll+0xc>)
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000cf0 	.word	0x20000cf0

08001e1c <xTaskIncrementTick>:
{
 8001e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <xTaskIncrementTick+0xf8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d153      	bne.n	8001ed0 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001e28:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <xTaskIncrementTick+0xfc>)
 8001e2a:	681c      	ldr	r4, [r3, #0]
 8001e2c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001e2e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001e30:	b9bc      	cbnz	r4, 8001e62 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <xTaskIncrementTick+0x100>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	b142      	cbz	r2, 8001e4c <xTaskIncrementTick+0x30>
 8001e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3e:	f383 8811 	msr	BASEPRI, r3
 8001e42:	f3bf 8f6f 	isb	sy
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	e7fe      	b.n	8001e4a <xTaskIncrementTick+0x2e>
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <xTaskIncrementTick+0x104>)
 8001e4e:	6819      	ldr	r1, [r3, #0]
 8001e50:	6810      	ldr	r0, [r2, #0]
 8001e52:	6018      	str	r0, [r3, #0]
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <xTaskIncrementTick+0x108>)
 8001e58:	6813      	ldr	r3, [r2, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	f7ff fe71 	bl	8001b44 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001e62:	4d31      	ldr	r5, [pc, #196]	; (8001f28 <xTaskIncrementTick+0x10c>)
 8001e64:	4f31      	ldr	r7, [pc, #196]	; (8001f2c <xTaskIncrementTick+0x110>)
 8001e66:	682b      	ldr	r3, [r5, #0]
 8001e68:	429c      	cmp	r4, r3
 8001e6a:	f04f 0b00 	mov.w	fp, #0
 8001e6e:	d33e      	bcc.n	8001eee <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e70:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001f1c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001e74:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001f3c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e78:	f8d8 2000 	ldr.w	r2, [r8]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	bb72      	cbnz	r2, 8001ede <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	602a      	str	r2, [r5, #0]
					break;
 8001e86:	e032      	b.n	8001eee <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e88:	f106 0a04 	add.w	sl, r6, #4
 8001e8c:	4650      	mov	r0, sl
 8001e8e:	f7ff fce2 	bl	8001856 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e92:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001e94:	b119      	cbz	r1, 8001e9e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e96:	f106 0018 	add.w	r0, r6, #24
 8001e9a:	f7ff fcdc 	bl	8001856 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e9e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001ea0:	f8d9 3000 	ldr.w	r3, [r9]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	fa02 f100 	lsl.w	r1, r2, r0
 8001eaa:	4319      	orrs	r1, r3
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <xTaskIncrementTick+0x114>)
 8001eae:	f8c9 1000 	str.w	r1, [r9]
 8001eb2:	f04f 0e14 	mov.w	lr, #20
 8001eb6:	4651      	mov	r1, sl
 8001eb8:	fb0e 3000 	mla	r0, lr, r0, r3
 8001ebc:	f7ff fca8 	bl	8001810 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001ec4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001ec6:	4291      	cmp	r1, r2
 8001ec8:	bf28      	it	cs
 8001eca:	f04f 0b01 	movcs.w	fp, #1
 8001ece:	e7d3      	b.n	8001e78 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001ed0:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <xTaskIncrementTick+0x118>)
 8001ed2:	6813      	ldr	r3, [r2, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001ed8:	f04f 0b00 	mov.w	fp, #0
 8001edc:	e011      	b.n	8001f02 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ede:	f8d8 2000 	ldr.w	r2, [r8]
 8001ee2:	68d2      	ldr	r2, [r2, #12]
 8001ee4:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ee6:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001ee8:	428c      	cmp	r4, r1
 8001eea:	d2cd      	bcs.n	8001e88 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001eec:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <xTaskIncrementTick+0x114>)
 8001ef2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ef4:	2214      	movs	r2, #20
 8001ef6:	434a      	muls	r2, r1
 8001ef8:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001efa:	2a02      	cmp	r2, #2
 8001efc:	bf28      	it	cs
 8001efe:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001f02:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <xTaskIncrementTick+0x11c>)
 8001f04:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001f06:	2a00      	cmp	r2, #0
 8001f08:	bf18      	it	ne
 8001f0a:	f04f 0b01 	movne.w	fp, #1
}
 8001f0e:	4658      	mov	r0, fp
 8001f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f14:	20000cf0 	.word	0x20000cf0
 8001f18:	20000d70 	.word	0x20000d70
 8001f1c:	20000c50 	.word	0x20000c50
 8001f20:	20000c54 	.word	0x20000c54
 8001f24:	20000d2c 	.word	0x20000d2c
 8001f28:	20000d28 	.word	0x20000d28
 8001f2c:	20000c4c 	.word	0x20000c4c
 8001f30:	20000c58 	.word	0x20000c58
 8001f34:	20000cec 	.word	0x20000cec
 8001f38:	20000d74 	.word	0x20000d74
 8001f3c:	20000cf8 	.word	0x20000cf8

08001f40 <xTaskResumeAll>:
{
 8001f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001f44:	4c31      	ldr	r4, [pc, #196]	; (800200c <xTaskResumeAll+0xcc>)
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	b943      	cbnz	r3, 8001f5c <xTaskResumeAll+0x1c>
 8001f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4e:	f383 8811 	msr	BASEPRI, r3
 8001f52:	f3bf 8f6f 	isb	sy
 8001f56:	f3bf 8f4f 	dsb	sy
 8001f5a:	e7fe      	b.n	8001f5a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001f5c:	f7ff fcea 	bl	8001934 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f66:	6824      	ldr	r4, [r4, #0]
 8001f68:	b12c      	cbz	r4, 8001f76 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001f6a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001f6c:	f7ff fd04 	bl	8001978 <vPortExitCritical>
}
 8001f70:	4620      	mov	r0, r4
 8001f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <xTaskResumeAll+0xd0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f5      	beq.n	8001f6a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f7e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002028 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001f82:	4f24      	ldr	r7, [pc, #144]	; (8002014 <xTaskResumeAll+0xd4>)
 8001f84:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800202c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f88:	f8d9 3000 	ldr.w	r3, [r9]
 8001f8c:	b9e3      	cbnz	r3, 8001fc8 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001f8e:	b10c      	cbz	r4, 8001f94 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001f90:	f7ff fdd8 	bl	8001b44 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001f94:	4d20      	ldr	r5, [pc, #128]	; (8002018 <xTaskResumeAll+0xd8>)
 8001f96:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001f98:	b144      	cbz	r4, 8001fac <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001f9a:	4e20      	ldr	r6, [pc, #128]	; (800201c <xTaskResumeAll+0xdc>)
 8001f9c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001f9e:	f7ff ff3d 	bl	8001e1c <xTaskIncrementTick>
 8001fa2:	b100      	cbz	r0, 8001fa6 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001fa4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001fa6:	3c01      	subs	r4, #1
 8001fa8:	d1f9      	bne.n	8001f9e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001faa:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <xTaskResumeAll+0xdc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0da      	beq.n	8001f6a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <xTaskResumeAll+0xe0>)
 8001fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001fc4:	2401      	movs	r4, #1
 8001fc6:	e7d1      	b.n	8001f6c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001fc8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001fcc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fce:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fd0:	f104 0018 	add.w	r0, r4, #24
 8001fd4:	f7ff fc3f 	bl	8001856 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fd8:	4630      	mov	r0, r6
 8001fda:	f7ff fc3c 	bl	8001856 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001fde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fe0:	6839      	ldr	r1, [r7, #0]
 8001fe2:	2501      	movs	r5, #1
 8001fe4:	fa05 f302 	lsl.w	r3, r5, r2
 8001fe8:	2014      	movs	r0, #20
 8001fea:	430b      	orrs	r3, r1
 8001fec:	fb00 8002 	mla	r0, r0, r2, r8
 8001ff0:	4631      	mov	r1, r6
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	f7ff fc0c 	bl	8001810 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <xTaskResumeAll+0xe4>)
 8001ffa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002002:	bf24      	itt	cs
 8002004:	4b05      	ldrcs	r3, [pc, #20]	; (800201c <xTaskResumeAll+0xdc>)
 8002006:	601d      	strcs	r5, [r3, #0]
 8002008:	e7be      	b.n	8001f88 <xTaskResumeAll+0x48>
 800200a:	bf00      	nop
 800200c:	20000cf0 	.word	0x20000cf0
 8002010:	20000ce4 	.word	0x20000ce4
 8002014:	20000cf8 	.word	0x20000cf8
 8002018:	20000cec 	.word	0x20000cec
 800201c:	20000d74 	.word	0x20000d74
 8002020:	e000ed04 	.word	0xe000ed04
 8002024:	20000c4c 	.word	0x20000c4c
 8002028:	20000d30 	.word	0x20000d30
 800202c:	20000c58 	.word	0x20000c58

08002030 <vTaskDelay>:
	{
 8002030:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002032:	b940      	cbnz	r0, 8002046 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <vTaskDelay+0x40>)
 8002036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	f3bf 8f6f 	isb	sy
 8002044:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <vTaskDelay+0x44>)
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	b141      	cbz	r1, 800205e <vTaskDelay+0x2e>
 800204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002050:	f383 8811 	msr	BASEPRI, r3
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	e7fe      	b.n	800205c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800205e:	f7ff fed5 	bl	8001e0c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002062:	f7ff fd81 	bl	8001b68 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002066:	f7ff ff6b 	bl	8001f40 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800206a:	2800      	cmp	r0, #0
 800206c:	d0e2      	beq.n	8002034 <vTaskDelay+0x4>
 800206e:	bd08      	pop	{r3, pc}
 8002070:	e000ed04 	.word	0xe000ed04
 8002074:	20000cf0 	.word	0x20000cf0

08002078 <prvIdleTask>:
{
 8002078:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800207a:	4e17      	ldr	r6, [pc, #92]	; (80020d8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800207c:	4c17      	ldr	r4, [pc, #92]	; (80020dc <prvIdleTask+0x64>)
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	b963      	cbnz	r3, 800209c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <prvIdleTask+0x68>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d9f8      	bls.n	800207c <prvIdleTask+0x4>
				taskYIELD();
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <prvIdleTask+0x6c>)
 800208c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	f3bf 8f4f 	dsb	sy
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	e7ef      	b.n	800207c <prvIdleTask+0x4>
			vTaskSuspendAll();
 800209c:	f7ff feb6 	bl	8001e0c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80020a0:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80020a2:	f7ff ff4d 	bl	8001f40 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	d0e9      	beq.n	800207e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80020aa:	f7ff fc43 	bl	8001934 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80020ae:	68f3      	ldr	r3, [r6, #12]
 80020b0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020b2:	1d28      	adds	r0, r5, #4
 80020b4:	f7ff fbcf 	bl	8001856 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <prvIdleTask+0x70>)
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	3b01      	subs	r3, #1
 80020be:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80020c6:	f7ff fc57 	bl	8001978 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80020ca:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80020cc:	f7ff fb5a 	bl	8001784 <vPortFree>
			vPortFree( pxTCB );
 80020d0:	4628      	mov	r0, r5
 80020d2:	f7ff fb57 	bl	8001784 <vPortFree>
 80020d6:	e7d2      	b.n	800207e <prvIdleTask+0x6>
 80020d8:	20000d5c 	.word	0x20000d5c
 80020dc:	20000ce8 	.word	0x20000ce8
 80020e0:	20000c58 	.word	0x20000c58
 80020e4:	e000ed04 	.word	0xe000ed04
 80020e8:	20000ce4 	.word	0x20000ce4

080020ec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <vTaskSwitchContext+0x60>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <vTaskSwitchContext+0x64>)
{
 80020f2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020f4:	b112      	cbz	r2, 80020fc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80020f6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80020fc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <vTaskSwitchContext+0x68>)
 8002100:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f1c3 031f 	rsb	r3, r3, #31
 800210c:	2214      	movs	r2, #20
 800210e:	4912      	ldr	r1, [pc, #72]	; (8002158 <vTaskSwitchContext+0x6c>)
 8002110:	435a      	muls	r2, r3
 8002112:	1888      	adds	r0, r1, r2
 8002114:	588c      	ldr	r4, [r1, r2]
 8002116:	b944      	cbnz	r4, 800212a <vTaskSwitchContext+0x3e>
	__asm volatile
 8002118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211c:	f383 8811 	msr	BASEPRI, r3
 8002120:	f3bf 8f6f 	isb	sy
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	e7fe      	b.n	8002128 <vTaskSwitchContext+0x3c>
 800212a:	6844      	ldr	r4, [r0, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	6864      	ldr	r4, [r4, #4]
 8002130:	6044      	str	r4, [r0, #4]
 8002132:	440a      	add	r2, r1
 8002134:	4294      	cmp	r4, r2
 8002136:	bf04      	itt	eq
 8002138:	6862      	ldreq	r2, [r4, #4]
 800213a:	6042      	streq	r2, [r0, #4]
 800213c:	2214      	movs	r2, #20
 800213e:	fb02 1303 	mla	r3, r2, r3, r1
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <vTaskSwitchContext+0x70>)
 8002148:	e7d6      	b.n	80020f8 <vTaskSwitchContext+0xc>
 800214a:	bf00      	nop
 800214c:	20000cf0 	.word	0x20000cf0
 8002150:	20000d74 	.word	0x20000d74
 8002154:	20000cf8 	.word	0x20000cf8
 8002158:	20000c58 	.word	0x20000c58
 800215c:	20000c4c 	.word	0x20000c4c

08002160 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <xTaskGetSchedulerState+0x18>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b133      	cbz	r3, 8002174 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <xTaskGetSchedulerState+0x1c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800216c:	bf0c      	ite	eq
 800216e:	2002      	moveq	r0, #2
 8002170:	2000      	movne	r0, #0
 8002172:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002174:	2001      	movs	r0, #1
	}
 8002176:	4770      	bx	lr
 8002178:	20000d44 	.word	0x20000d44
 800217c:	20000cf0 	.word	0x20000cf0

08002180 <__libc_init_array>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	4e0d      	ldr	r6, [pc, #52]	; (80021b8 <__libc_init_array+0x38>)
 8002184:	4c0d      	ldr	r4, [pc, #52]	; (80021bc <__libc_init_array+0x3c>)
 8002186:	1ba4      	subs	r4, r4, r6
 8002188:	10a4      	asrs	r4, r4, #2
 800218a:	2500      	movs	r5, #0
 800218c:	42a5      	cmp	r5, r4
 800218e:	d109      	bne.n	80021a4 <__libc_init_array+0x24>
 8002190:	4e0b      	ldr	r6, [pc, #44]	; (80021c0 <__libc_init_array+0x40>)
 8002192:	4c0c      	ldr	r4, [pc, #48]	; (80021c4 <__libc_init_array+0x44>)
 8002194:	f000 f818 	bl	80021c8 <_init>
 8002198:	1ba4      	subs	r4, r4, r6
 800219a:	10a4      	asrs	r4, r4, #2
 800219c:	2500      	movs	r5, #0
 800219e:	42a5      	cmp	r5, r4
 80021a0:	d105      	bne.n	80021ae <__libc_init_array+0x2e>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a8:	4798      	blx	r3
 80021aa:	3501      	adds	r5, #1
 80021ac:	e7ee      	b.n	800218c <__libc_init_array+0xc>
 80021ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021b2:	4798      	blx	r3
 80021b4:	3501      	adds	r5, #1
 80021b6:	e7f2      	b.n	800219e <__libc_init_array+0x1e>
 80021b8:	08002260 	.word	0x08002260
 80021bc:	08002260 	.word	0x08002260
 80021c0:	08002260 	.word	0x08002260
 80021c4:	08002264 	.word	0x08002264

080021c8 <_init>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr

080021d4 <_fini>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr
